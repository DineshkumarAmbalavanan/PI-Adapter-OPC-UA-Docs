{
  "V1/main/V1/Troubleshooting/Data buffering.html": {
    "href": "V1/main/V1/Troubleshooting/Data buffering.html",
    "title": "Data buffering",
    "keywords": "Data buffering"
  },
  "V1/main/V1/Installation/Uninstall the adapter.html": {
    "href": "V1/main/V1/Installation/Uninstall the adapter.html",
    "title": "Uninstall the adapter",
    "keywords": "Uninstall the adapter"
  },
  "V1/main/V1/Health/Next health message expected.html": {
    "href": "V1/main/V1/Health/Next health message expected.html",
    "title": "Next Health Message Expected",
    "keywords": "Next Health Message Expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected will be sent by an individual adapter data component on a periodic basis while it is functioning properly. This value will be a timestamp indicating when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, etc. Property Type Description Time string Timestamp of the event. NextHealthMessageExpected string Timestamp when next value is expected."
  },
  "V1/main/V1/Health/Health and diagnostics.html": {
    "href": "V1/main/V1/Health/Health and diagnostics.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics"
  },
  "V1/main/V1/Health/Device status.html": {
    "href": "V1/main/V1/Health/Device status.html",
    "title": "Device Status",
    "keywords": "Device Status The device status indicates the health of this component and whether or not it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of \"Good\" is expected. Property Type Description Time string Timestamp of the event. DeviceStatus string The value of the DeviceStatus. The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to failover. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished."
  },
  "V1/main/V1/Health/Adapter health.html": {
    "href": "V1/main/V1/Health/Adapter health.html",
    "title": "Adapter health",
    "keywords": "Adapter health Adapters produce various types of health data. You can use this information to ensure that your adapters are running properly and data is flowing to the configured OSIsoft OMF endpoints. This section provides information on how to configure your adapters so that this health data is produced and stored at a designated endpoint and what types of health data are available. Configure health endpoints A health endpoint designates an OSIsoft OMF endpoint where adapter health information should be sent. You can configure multiple health endpoints. Using any text editor, create a file that contains one or more health endpoints in JSON form. For a table of all available health endpoint parameters, see Parameters . Save the file. Use any tool capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: ` Parameters Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Endpoint Required string The URL of the OMF endpoint to receive this health data. ClientId Required for OCS endpoints string The Client Id used for authentication with an OSIsoft Cloud Services OMF endpoint. ClientSecret Required for OCS endpoints string The Client Secret used for authentication with an OSIsoft Cloud Services OMF endpoint. Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint. Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint. BufferingEnabled Optional bool Enables or disables buffering to this endpoint. By default, buffering is enabled (\"true\"). ValidateEndpointCertificate Optional bool Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends setting this to true in production environments. Defaults to true. Available health data Each individual adapter data component produces a few different pieces of health data. Dynamic data is sent every minute to configured health endpoints. The following health data are available: Device status Next Health Message Expected Health endpoint differences - PI Web API vs. OSIsoft Cloud Services Two following two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it configured PI Systems for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following: The dynamic health data is actually time-series data that is stored in PI points on a PI Data Archive and can be seen in the AF hierarchy as PI Point Data Reference attributes. OSIsoft Cloud Services currently does not have a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data will be stored. Each value will be its own stream with the timestamp property as the single index."
  },
  "V1/main/V1/Health/Adapter diagnostics.html": {
    "href": "V1/main/V1/Health/Adapter diagnostics.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics OSIsoft adapters produce diagnostic data which you can use to find more information about a particular adapter instance. This data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For configuration of health endpoints, see </Health/Health.md>. AF hierarchy When you use PI Web API as a health endpoint, an AF hierarchy is created containing both the diagnostics and health data and metadata. Currently, OSIsoft Cloud Services does not provide a way to store static metadata and only contains the dynamic streams. For more information or to see an example of this hierarchy, see </Health/Health.md>. Stream count The stream count indicates the number of streams and associated types being produced and sent data for a particular adapter instance. Type Property Description string Timestamp Timestamp of event int StreamCount Overall number of streams created by the adapter instance int TypeCount Overall number of types created by the adapter instance IO rate The IO rate indicates the running average number of streams per second being produced by an adapter instance. Type Property Description string Timestamp Timestamp of event double IORate Average data rate (streams/second) Error rate The error rate indicates the average number of errors per second occurring for a particular adapter instance. Type Property Description string Timestamp Timestamp of event double ErrorRate Average error rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Diagnostics.html",
    "title": "Diagnostics configuration",
    "keywords": "Diagnostics configuration The adapter and its components produce diagnostics data which is sent to all health endpoints. The System_Diagnostics.json file contains a flag which determines whether Diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd tool. Diagnostics data are collected by default. Egress diagnostics data through PeriodicEgressEndpoints To egress diagnositcs related data, configure an adapter health egress endpoint. For more information, see Adapter health . Adapter diagnostics The Diagnostics.System dynamic type includes the following values which are logged in a stream with the id System.Diagnostics. This diagnostic stream contains system level information related to the host platform that the adapter is running on. Type Property Description string timestamp Timestamp of event int ProcessIdentifier Process id of the host process string StartTime Time at which the host process started long WorkingSet Amount of physical memory in bytes, allocated for the host process double TotalProcessorTime (uom=s) Total processor time for the host process expressed in seconds double TotalUserProcessorTime (uom=s) User processor time for the host process expressed in seconds double TotalPrivilegedProcessorTime (uom=s) Privileged processor time for the host process expressed in seconds int ThreadCount Number of threads in the host process int HandleCount Number of handles opened by the host process double ManagedMemorySize (uom=MB) Number of bytes currently thought to be allocated in managed memory double PrivateMemorySize (uom=MB) Amount of paged memory, in bytes, allocated for the host process double PeakPagedMemorySize (uom=MB) Maximum amount of memory in the virtual memory paging file, in bytes, used by the host process. double StorageTotalSize (uom=MB) Total size of the storage medium in use by the Edge Data Store double StorageFreeSpace (uom=MB) Free space available Each adapter component produces its own diagnostics streams. Stream count The Diagnostics.StreamCountEvent dynamic type includes these values, which are logged in a stream with the id {componentid}.StreamCount. The stream count and type count include only types and streams created for sequential data received from a data source. Type Property Description string timestamp Timestamp of event int StreamCount Number of streams created by the adapter instance int TypeCount Number of types created by the adapter instance IO rate The Diagnostics.Adapter.IORate dynamic type includes these values, which are logged in a stream with the id {componentid}.IORate. IO rate includes only sequential data collected from a data source. Type Property Description string timestamp Timestamp of event double IORate 1-minute rolling average of data rate (streams/second) Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes these values, which are logged in a stream with the id {componentid}.ErrorRate. Type Property Description string timestamp Timestamp of event double ErrorRate 1-minute rolling average of error rate (streams/second) Egress diagnostics The Egress component of the adapter produces the following diagnostics streams. IO rate The Diagnostics.Egress.IORate dynamic type includes these values, which are logged in a stream with the id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate. IO rate includes only sequential data sucessfully sent to an egress. Type Property Description string timestamp Timestamp of event double IORate 1-minute rolling average of data rate (streams/second) REST URLs Relative URL HTTP verb Action api/v1/configuration/system/diagnostics GET Gets the diagnostics configuration api/v1/configuration/system/diagnostics PUT Replaces the existing diagnostics configuration Examples Retrieve the diagnostics configuration through REST client curl -X GET http://localhost:{port}/api/v1/configuration/system/diagnostics Sample output: { \"enableDiagnostics\": true } Configure diagnostics through REST client curl -X PUT http://localhost:{port}/api/v1/configuration/system/diagnostics -H 'Content-Type: application/json' -d '{ \"enableDiagnostics\": true }' In the previous examples, port refers to the configured port for the adapter to run on. If successful, the methods returns a 204 No Content response code. AF structure After running diagnostics with a health endpoint configured to a PI server, you can use PI System Explorer to view the diagnostics for a given adapter. The element hierarchy is shown in the following image. Note: The_ Elements root contains a link to an Adapters _ node. This is the root note for all adapter instances. Below Adapters there will be one or more adapter nodes. Each node's title is defined by the node's corresponding computer name and service name in this format: _**{ComputerName}.{ServiceName}**_ . For example, in the following image, RGRALAK5530 is the computer name, and SignalGenerator is the service name. To see the System.Diagnostics values, clicking on an adapter node and set the tab to Attributes . Example values are shown in the image."
  },
  "V1/main/V1/Configure the adapter/Egress_DataEndpoints_schema.html": {
    "href": "V1/main/V1/Configure the adapter/Egress_DataEndpoints_schema.html",
    "title": "Egress endpoint configuration schema",
    "keywords": "Egress endpoint configuration schema [{ \"endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\", \"buffering\": 0, \"maxBufferSizeMB\": 0 }, { \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\", \"buffering\": 0, \"maxBufferSizeMB\": 0 } ] Abstract Extensible Status Identifiable Custom Properties Additional Properties Defined In Can be instantiated Yes Experimental No Forbidden Forbidden Egress_DataEndpoints_schema.json EgressEndpointConfiguration Properties Property Type Required Nullable Defined by Buffering reference Optional No EgressEndpointConfiguration (this schema) ClientId string Optional Yes EgressEndpointConfiguration (this schema) ClientSecret string Optional Yes EgressEndpointConfiguration (this schema) Endpoint string Required No EgressEndpointConfiguration (this schema) Id string Optional Yes EgressEndpointConfiguration (this schema) MaxBufferSizeMB integer Optional No EgressEndpointConfiguration (this schema) Password string Optional Yes EgressEndpointConfiguration (this schema) TokenEndpoint string Optional Yes EgressEndpointConfiguration (this schema) UserName string Optional Yes EgressEndpointConfiguration (this schema) ValidateEndpointCertificate boolean Optional No EgressEndpointConfiguration (this schema) Buffering Buffering is optional type: reference defined in this schema Buffering Type – #/definitions/BufferType ClientId ClientId is optional type: string defined in this schema ClientId Type string , nullable ClientSecret ClientSecret is optional type: string defined in this schema ClientSecret Type string , nullable Endpoint Endpoint is required type: string defined in this schema Endpoint Type string minimum length: 1 characters Id Id is optional type: string defined in this schema Id Type string , nullable MaxBufferSizeMB MaxBufferSizeMB is optional type: integer defined in this schema MaxBufferSizeMB Type integer Password Password is optional type: string defined in this schema Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string defined in this schema TokenEndpoint Type string , nullable UserName UserName is optional type: string defined in this schema UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean defined in this schema ValidateEndpointCertificate Type boolean All of the following requirements need to be fulfilled. Requirement 1 object with following properties: Property Type Required Buffering reference Optional ClientId string Optional ClientSecret string Optional Endpoint string Required Id string Optional MaxBufferSizeMB integer Optional Password string Optional TokenEndpoint string Optional UserName string Optional ValidateEndpointCertificate boolean Optional Buffering Buffering is optional type: reference Buffering Type – #/definitions/BufferType ClientId ClientId is optional type: string ClientId Type string , nullable ClientSecret ClientSecret is optional type: string ClientSecret Type string , nullable Endpoint Endpoint is required type: string Endpoint Type string minimum length: 1 characters Id Id is optional type: string Id Type string , nullable MaxBufferSizeMB MaxBufferSizeMB is optional type: integer MaxBufferSizeMB Type integer Password Password is optional type: string Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string TokenEndpoint Type string , nullable UserName UserName is optional type: string UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean ValidateEndpointCertificate Type boolean"
  },
  "V1/main/V1/Configuration/System components configuration.html": {
    "href": "V1/main/V1/Configuration/System components configuration.html",
    "title": "System components configuration",
    "keywords": "System components configuration OSIsoft adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the edgecmd command line tool for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form (with cryptographic key material stored separately in a secure location.) If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system using REST, but also configure the system as a whole with a single REST call. Configure system components The default System_Components.json file for the System component contains the following information. The Egress component is required for this initial release for adapters to run. [ { \"ComponentId\": \"Egress\", \"ComponentType\": \"OmfEgress\" } ] You can add additional components if you want, but only a single OmfEgress component is supported. To add a new component, create a JSON file with the ComponentId and ComponentType. The following example adds a Modbus TCP adapter. Note: A unique ComponentId is necessary for each component in the system. This example uses the ComponentId Modbus1 since it is the first Modbus TCP adapter: { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" } Save the JSON in a file named AddComponent.json . From the same directory where the file exists, run the following curl script: curl -i -d \"@AddComponent.json\" -H \"Content-Type: application/json\" http://localhost:5595/api/v1/configuration/system/components After the curl command completes successfully, you can configure or use the new component. Delete a component To delete an existing component, run the following curl script: curl -X DELETE http://localhost:5595/api/v1/configuration/system/components/{ComponentId_To_Delete}/ All the logs and configurations files for the deleted components will be moved to the corresponding logs/Removed or Configuration/Removed folder. System components schema The following table defines the basic behavior of the AddComponent.json file. Abstract Extensible Status Identifiable Custom properties Additional properties Can be instantiated Yes Experimental No Forbidden Forbidden Parameters for system components The following parameters are available for configuring system components. Parameters Required Type Nullable Description ComponentId Required string Yes The ID of the component. It can be any alphanumeric string, for example Egress. ComponentType Required string Yes The type of the component, for example OmfEgress. There are two types of components: OmfEgress and the adapter. System components example [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Modbus2\", \"componentType\": \"Modbus\" }, { \"ComponentId\": \"Egress\", \"ComponentType\": \"OmfEgress\" } ]"
  },
  "V1/main/V1/Configuration/Message logging configuration.html": {
    "href": "V1/main/V1/Configuration/Message logging configuration.html",
    "title": "Message logging configuration",
    "keywords": "Message logging configuration"
  },
  "V1/main/V1/Configuration/Health and diagnostics configuration.html": {
    "href": "V1/main/V1/Configuration/Health and diagnostics configuration.html",
    "title": "Health and diagnostics configuration",
    "keywords": "Health and diagnostics configuration"
  },
  "V1/main/V1/Configuration/Endpoints configuration.html": {
    "href": "V1/main/V1/Configuration/Endpoints configuration.html",
    "title": "Configure endpoints",
    "keywords": "Configure endpoints Adapters can egress dynamic data to destinations that you supply through OMF. Supported destinations are OSIsoft Cloud Services and PI servers through PI Web API. An egress endpoint represents a destination to which data will be sent. You can specify multiple endpoints. Every egress endpoint is executed independently of all other egress endpoints and is expected to accept OMF messages. An egress endpoint is comprised of the properties specified under Parameters . Note: Some types, and consequently containers and data, cannot be egressed. For more information, see Egress Execution Details . Configuration procedure Note: You cannot add egress configurations manually because some parameters are encrypted when stored to disk. You must use the REST endpoints to add or edit egress configuration. For additional endpoints, see REST URLs . Complete the following to create new egress endpoints: Using any text editor, create a file that contains one or more egress endpoints in JSON form. For content structure, see Examples . For a table of all available egress parameters, see Parameters . Save the file. Use any tool capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/Egress/dataendpoints/ Example using cURL: Add endpoints curl -v -d \"@Egress_DataEndpoints.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/Egress/dataendpoints\" curl -v -d \"@Egress_DataEndpoints.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/Egress/dataendpoints\" Delete an endpoint curl -v -X DELETE \"http://localhost:5590/api/v1/configuration/Egress/dataendpoints/{id}\" Update an endpoint curl -v -d \"@Egress_DataEndpoint.config.json\" -H \"Content-Type: application/json\" -X UPDATE \"http://localhost:5590/api/v1/configuration/Egress/dataendpoints/{id}\" View endpoints curl -v -X GET \"http://localhost:5590/api/v1/configuration/Egress/DataEndpoints\" Parameters Parameter Required Type Description Id Required string Unique identifier Endpoint Required string Destination that accepts OMF v1.1 messages. Supported destinations include OCS and PI server. ClientId Required for OCS endpoint string Authentication with the OCS OMF endpoint. ClientSecret Required for OCS endpoint string Authentication with the OCS OMF endpoint. TokenEndpoint Optional for OCS endpoint string Retrieves an OCS token from an alternative endpoint. Username Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint. Password Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint. ValidateEndpointCertificate Optional boolean Disables verification of destination certificate. Use for testing only with self-signed certificates. Defaults to true. Examples The following examples are valid egress configurations. Egress data to OCS [{ \"Id\": \"OCS\", \"Endpoint\" : \" https://{IP/FQDN of OCS}/api/Tenants/{tenantId}/Namespaces/{namespaceId}/omf\", \"ClientId\" : \"{clientId}\", \"ClientSecret\" : \"{clientSecret}\" }] Egress data to PI Web API. [{ \"Id\": \"PI WebAPI\", \"Endpoint\" : \" https://{IP/FQDN of WebApi}/piwebapi/omf\", \"userName\" : \"{username}\", \"Password\" : \"{password}\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/egress/DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/egress/DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/egress/DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/egress/DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/egress/DataEndpoints/{id} GET Gets configured endpoint by id api/v1/configuration/egress/DataEndpoints/{id} DELETE Deletes configured endpoint by id api/v1/configuration/egress/DataEndpoints/{id} PUT Replaces egress endpoint by id . Fails if endpoint doesn't exist api/v1/configuration/egress/DataEndpoints/{id} PATCH Allows partial updating of configured endpoint by id Egress execution details After you add configuration for an egress endpoint, egress will be executed immediately for that endpoint. Egress is handled individually per configured endpoint. On first execution, types and containers will be egressed. After that only new or changed types or containers will be egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If an egress endpoint is removed, data flow will immediately end for that endpoint. Any buffered data for the endpoint that has been deleted will be permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the destination, failure to add a single item will result in the message failing. Types, containers, and data will continue to be egressed as long as the destination continues to respond to HTTP requests - retrying previous failures as needed."
  },
  "V1/main/V1/Configuration/Buffering configuration.html": {
    "href": "V1/main/V1/Configuration/Buffering configuration.html",
    "title": "Configure buffering",
    "keywords": "Configure buffering To configure buffering for the data egressed from the adapters to endpoints, you use buffering configuration parameters. These are global parameters and take effect only during startup. OSIsoft strongly recommends that you do not modify the default buffer configuration values. Note: This section describes the global parameters used for on-disk buffering configuration. For enabling or disabling buffering at the individual egress endpoint level using the bufferingEnabled field, see: <> The parameters for on-disk buffering for the adapters that can be configured are: Parameter Required Type Description OnDiskMaxBufferSizeMB Yes Integer Defines the maximum size of the buffer file that will be persisted on disk. The unit is specified in MB (Mebibyte 1 MiB = 1048576 bytes). You must take the capacity and type of the storage medium into account before you determine an alternative value for this parameter. For the case that you do not want to specify a maximum file size, a value of -1 indicates that the file size is restricted only by the available free disk space. Allowed values: -1 or [1, 2147483647]. Default: -1 OnDiskBufferLocation Optional String Defines the location of the buffer file. Absolute paths are required. Take into account access-control list (ACL) when setting this parameter Allowed value: Path to an existing folder location in the file system. Default: Windows: %ProgramData%\\Adapters\\Data Linux: /usr/share/OSIsoft/Adapters/Data REST URLs Relative URL HTTP verb Action api/v1/configuration/egress/buffering GET Gets the buffering configuration api/v1/configuration/egress/buffering PUT Replaces the existing buffering configuration Examples Retrieve the buffering configuration through REST client curl -X GET http://localhost:{port}/api/v1/configuration/egress/buffering Sample output: { \"onDiskBufferLocation\": \"C:\\\\ProgramData\\\\OSIsoft\\\\Adapters\\\\Data\", \"onDiskMaxBufferSizeMB\": 10 } Configure buffer through REST client curl -X PUT http://localhost:{port}/api/v1/configuration/egress/buffering -H 'Content-Type: application/json' -d '{ \"onDiskMaxBufferSizeMB\": 25, \"onDiskBufferLocation\": \"C:\\\\ProgramData\\\\OSIsoft\\\\Data\" }' In the previous examples, port refers to the configured port for the adapter to run on. If successful, the methods returns a 200 OK response code."
  },
  "V1/main/V1/Configuration/Adapter configuration.html": {
    "href": "V1/main/V1/Configuration/Adapter configuration.html",
    "title": "Adapter configuration",
    "keywords": "Adapter configuration You can configure OSIsoft System and adapter components entirely using a single call for replacing the existing configuration. Import configuration REST URLs Relative URL HTTP verb Action api/v1/configuration/ PUT Replaces the configuration for the entire adapter Sample configuration file for OPC UA The following sample includes configuration of System components along with an OPC UA adapter. { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamIdPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ] }, \"Egress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ], \"Buffering\": { \"onDiskBufferLocation\": \"C:\\\\ProgramData\\\\OSIsoft\\\\Adapters\\\\Buffering\", \"onDiskMaxBufferSizeMB\": -1 } } } Import full adapter configuration using REST client To import the full adapter configuration, run the following command: curl -X http://localhost:5595/api/v1/configuration -d '{ JSON content }' Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. Configuration errors If the operation fails due to errors in the configuration, the count of the error and suitable error message(s) are returned in the result."
  },
  "V1/main/V1/Administration/Start and stop ingress component.html": {
    "href": "V1/main/V1/Administration/Start and stop ingress component.html",
    "title": "Start and stop ingress component",
    "keywords": "Start and stop ingress component"
  },
  "V1/main/V1/Administration/Start and stop an adapter.html": {
    "href": "V1/main/V1/Administration/Start and stop an adapter.html",
    "title": "Start and stop an adapter",
    "keywords": "Start and stop an adapter By default, all currently configured OSIsoft adapters are started and remain running until the product shuts down. Start an OSIsoft adapter To start an individual OSIsoft adapter, use any REST client and make a request using the following: Method: POST Endpoint: http://localhost:5590/api/v1/administration/OSIsoft adapterId/Start Header: Content-Type application/json Example using cURL: curl -v -d \"\" http://localhost:5590/api/v1/Administration/OSIsoft adapterId/Start Note: Replace OSIsoft adapterId with the ID of the OSIsoft adapter you want to start. An HTTP status 204 message indicates success. Stop an OSIsoft adapter To stop an individual OSIsoft adapter, use any REST client and make a request using the following: Method: POST Endpoint: http://localhost:5590/api/v1/administration/OSIsoft adapterId/Stop Header: Content-Type application/json Example using cURL: curl -v -d \"\" http://localhost:5590/api/v1/Administration/OSIsoft adapterId/Stop Note: Replace OSIsoft adapterId with the ID of the OSIsoft adapter you want to stop. An HTTP status 204 message indicates success."
  },
  "V1/main/V1/Administration/Retrieve product version information.html": {
    "href": "V1/main/V1/Administration/Retrieve product version information.html",
    "title": "Retrieve product version information",
    "keywords": "Retrieve product version information In order to get the application version, the version of the underlying .NET Core Framework, and the operating system that the adapter is running on, you can make requests against the Diagnostics endpoint. Run the following command: GET http://localhost:5595/api/v1/Diagnostics/ProductInformation Result example: { \"Application Version\": \"1.1.0.0\", \".Net Core Version\": \".NET Core 3.1.0\", \"Operating System\": \"Microsoft Windows 10.0.18362\" }"
  },
  "V1/main/V1/Administration/Delete an adapter component.html": {
    "href": "V1/main/V1/Administration/Delete an adapter component.html",
    "title": "Delete an adapter component",
    "keywords": "Delete an adapter component An adapter instance can be removed by making a DELETE call with either a REST client or the EdgeCmd utility. When an adapter instance is removed, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data will remain on respective endpoints. File Relocation All configuration and log files will be renamed and moved to a folder called \"Removed\" within the respective directory. Configuration files will be moved to .\\Configuration\\Removed; logs files to .\\Logs\\Removed. The files are renamed according to the timestamp of removal, e.g. FileName.json_removed_yyyy-MM-dd--hh-mm-ss. In the following example, one Modbus Adapter service is installed on a particular Windows node with the name \"ModbusService1\". A Modbus component with the name \"ModbusDeviceX\" was added and configured to this Modbus adapter and later removed. Similar behavior will be seen on Linux. This is the resulting relocation and renaming scheme after deletion: REST Command: DELETE An empty DELETE command must be made against the Id of the component to be deleted. Using cURL: curl -v -X DELETE \"http://localhost:5595/api/v1/configuration/system/components/ComponentIdToBeDeleted\" REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/{id} DELETE Deletes specified component"
  },
  "V1/main/V1/Administration/Administration.html": {
    "href": "V1/main/V1/Administration/Administration.html",
    "title": "Administration",
    "keywords": "Administration"
  },
  "V1/main/V1/readme.html": {
    "href": "V1/main/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "OSIsoft Adapter for OPC UA",
    "keywords": "OSIsoft Adapter for OPC UA ======= OSIsoft Adapter for OPC UA overview OSIsoft Adapter for OPC UA operational overview Supported features OSIsoft Adapter for OPC UA supported features OSIsoft Adapter for OPC UA principles of operation Data buffering Prepare for adapter installation Software and hardware requirements Download OSIsoft Adapter Install the adapter Uninstall the adapter Configure OSIsoft Adapter for OPC UA Configure data source Configure data selection Configure message logging Configure endpoints Run OSIsoft Adapter for OPC UA Health Device status Next health message expected Diagnostics OSIsoft Adapter diagnostics OSIsoft Adapter for OPC UA diagnostics Troubleshooting Logging Data buffering"
  },
  "V1/main/test.html": {
    "href": "V1/main/test.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/README.html": {
    "href": "V1/main/README.html",
    "title": "OSIsoft Adapter Docs",
    "keywords": "OSIsoft Adapter Docs"
  },
  "V1/Configuration/OSIsoft Adapter for OPC UA security configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for OPC UA security configuration.html",
    "title": "OSIsoft Adapter for OPC UA security configuration",
    "keywords": "OSIsoft Adapter for OPC UA security configuration"
  },
  "V1/Configuration/OSIsoft Adapter for OPC UA data source configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for OPC UA data source configuration.html",
    "title": "OSIsoft Adapter for OPC UA data source configuration",
    "keywords": "OSIsoft Adapter for OPC UA data source configuration In order to use the OPC UA adapter, you must configure the data source from which it will receive data. Note: You cannot modify OPC UA data source configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following to configure the OPC UA data source: Using any text editor, create a file that contains an OPC UA data source in JSON form. For content structure, see OPC UA data source example . For a table of all available parameters, see Parameters for OPC UA data source . Save the file as DataSource.config.json . Use any Configuration tool capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<EDS adapterId>/DataSource/ . The following example shows the HTTPS request using curl (run this command from the same directory where the file is located): Note: During installation, you can add a single OPC UA adapter named OpcUa1. The following example uses this component name. curl -v -d \"@DataSource.config.json\" -H \"Content-Type: application/json\" \"http://localhost:5590/api/v1/configuration/OpcUa1/DataSource\" Note: After you have completed data source configuration, the next step is to configure data selection. You can either have a default data selection file generated or you can create the data selection file yourself. For more information, see Configure data selection . OPC UA data source schema The following table shows the basic behavior of the OpcUa_DataSource_schema.json file. Abstract Extensible Status Identifiable Custom properties Additional properties Can be instantiated Yes Experimental No Forbidden Forbidden Parameters for OPC UA data source The following parameters can be used to configure an OPC UA data source: Parameter Required Type Nullable Description EndpointURL Required string Yes The endpoint URL of the OPC UA server. The following is an example of the URL format: opc.tcp://OPCServerHost:Port/OpcUa/SimulationServer Note: If you change the EndpointURL on a configured OPC UA adapter that has ComponentID_DataSelection.json file exported, you need to remove the ComponentID_DataSelection.json file from the configuration directory to trigger a new browse (export). UseSecureConnection Optional Boolean No When set to true, the OPC UA adapter connects to a secure endpoint using OPC UA certificate exchange operation. The default is true. When set to false, the OPC UA adapter connects to an unsecured endpoint of the server and certificate exchange operation is not required. Note: OSIsoft recommends setting this option to false for testing purposes only. UserName Optional string Yes User name for accessing the OPC UA server. Password Optional string Yes Password for accessing the OPC UA server. Note: OSIsoft recommends using REST to configure the data source when the password must be specified. RootNodeIds Optional string Yes List of comma-separated NodeIds of those objects from which the OPC UA adapter browses the OPC UA server address space. This option allows selecting only subsets of the OPC UA address by explicitly listing one or more NodeIds which are used to start the initial browse. For example: ns=5;s=85/0:Simulation, ns=3;s=DataItems. If not specified, it means that the whole address space will be browsed. IncomingTimestamp Optional string No Specifies whether the incoming timestamp is taken from the source, from the OPC UA server, or should be created by the OPC UA adapter instance. Source - Default and recommended setting. The timestamp is taken from the source timestamp field. The source is what provides data for the item to the OPC UA server, such as a field device. Server - In case the OPC UA item has an invalid source timestamp field, the Server timestamp can be used. Connector - The OPC UA adapter generates a timestamp for the item upon receiving it from the OPC UA server. StreamIdPrefix Optional string Yes Specifies what prefix is used for Stream IDs. Naming convention is StreamIdPrefixNodeId. Note: An empty string means no prefix will be added to the Stream IDs. Null value means ComponentID followed by dot character will be added to the stream IDs (for example, OpcUa1.NodeId). ApplyPrefixToStreamId Optional boolean No Parameter applied to all data items collected from the data source that have custom stream ID configured. If configured, the adapter will apply the StreamIdPrefix property to all the streams with custom ID configured. The property does not affect any streams with default ID configured OPC UA data source example The following is an example of valid OPC UA data source configuration: { \"EndpointUrl\": \"opc.tcp://IP-Address/TestOPCUAServer\", \"UseSecureConnection\": true, \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"StreamIdPrefix\": null }"
  },
  "V1/Configuration/OSIsoft Adapter for OPC UA data selection configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for OPC UA data selection configuration.html",
    "title": "OSIsoft Adapter for OPC UA data selection configuration",
    "keywords": "OSIsoft Adapter for OPC UA data selection configuration In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the OPC UA adapter to collect from the data sources. When you add a data source, the OPC UA adapter browses the entire OPC UA server address space and exports the available OPC UA variables into a JSON file for data selection. Data is collected automatically based upon user demands. OPC UA data from OPC UA variables is read through subscriptions (unsolicited reads). You can either have the data selection configuration file generated for you or you can create it manually yourself. Generate default OPC UA data selection configuration file A default OPC UA data selection file will be created if there is no OPC UA data selection configuration, but a valid OPC UA data source exists. Note: To avoid possibly expensive browse operations, OSIsoft recommends that you manually create a data selection file instead of generating the default data selection file. For more information, see Configure OPC UA data selection Complete the following steps in order for this default data selection file to be generated: Add an OPC UA adapter with a unique ComponentId. During the installation of Edge Data Store, enabling the OPC UA adapter results in addition of a unique component that also satisfies this condition. Configure a valid OPC UA data source . Once you complete these steps, a default OPC UA data selection configuration file will be generated in the configuration directory for the corresponding platform. The following are example locations of the file created. In this example, it is assumed that the ComponentId of the OPC UA component is the default OpcUa1: Windows: %programdata%\\OSIsoft\\EdgeDataStore\\Configuration\\OpcUa1_DataSelection.json Linux: /usr/share/OSIsoft/EdgeDataStore/Configuration/OpcUa1_DataSelection.json Copy the file to a different directory. The contents of the file will look something like: [ { \"Selected\": false, \"Name\": \"Cold Side Inlet Temperature\", \"NodeId\": \"ns=2;s=Line1.HeatExchanger1001.ColdSideInletTemperature\", \"StreamId\": null }, { \"Selected\": false, \"Name\": \"Cold Side Outlet Temperature\", \"NodeId\": \"ns=2;s=Line1.HeatExchanger1001.ColdSideOutletTemperature\", \"StreamId\": null } ] In a text editor, edit the file and change the value of any Selected key from false to true in order to transfer the OPC UA data to be stored in Edge Data Store. In the same directory where you edited the file, run the following curl command: curl -i -d \"@OpcUa1_DataSelection.json\" -H \"Content-Type: application/json\" -X PUT http://localhost:5590/api/v1/configuration/OpcUa1/Dataselection Configure OPC UA data selection Note: You cannot modify OPC UA data selection configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following to configure the OPC UA data selection: Using any text editor, create a file that contains an OPC UA data selection in JSON form. For content structure, see OPC UA data selection example . For a table of all available parameters, see Parameters for OPC UA data selection . Save the file as DataSelection.config.json . Use any Configuration tool capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<EDS adapterId>/DataSelection/ The following example shows the HTTPS request using curl (run this command from the same directory where the file is located): Note: During installation, you can add a single OPC UA adapter named OpcUA1. The following example uses this component name. curl -v -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" \"http://localhost:5590/api/v1/configuration/OpcUa1/DataSelection\" OPC UA data selection schema The following table shows the basic behavior of the OpcUa_DataSelection_schema.json file. Abstract Extensible Status Identifiable Custom properties Additional properties Can be instantiated Yes Experimental No Forbidden Forbidden Parameters for OPC UA data selection The following parameters can be used to configure OPC UA data selection: Parameter Required Type Nullable Description Selected Optional boolean No Use this field to select or clear a measurement. To select an item, set to true. To remove an item, leave the field empty or set to false. If not configured, the default value is false. Name Optional string Yes The optional friendly name of the data item collected from the data source. If not configured, the default value will be the stream id. NodeId Required string Yes The NodeId of the variable. StreamID Optional string Yes The custom stream ID used to create the streams. If not specified, the OPC UA adapter will generate a default stream ID based on the measurement configuration. A properly configured custom stream ID follows these rules: Is not case-sensitive. Can contain spaces. Cannot start with two underscores (\"__\"). Can contain a maximum of 100 characters. Cannot use the following characters: / : ? # [ ] @ ! $ & ' ( ) \\ * + , ; = % < > | Cannot start or end with a period. Cannot contain consecutive periods. Cannot consist of only periods. OPC UA data selection example The following is an example of valid OPC UA data selection configuration: [ { \"Selected\": true, \"Name\": \"Random1\", \"NodeId\": \"ns=5;s=Random1\", \"StreamId\": \"CustomStreamName\" }, { \"Selected\": false, \"Name\": \"Sawtooth1\", \"NodeId\": \"ns=5;s=Sawtooth1\", \"StreamId\": null }, { \"Selected\": true, \"Name\": \"Sinusoid1\", \"NodeId\": \"ns=5;s=Sinusoid1\", \"StreamId\": null } ]"
  },
  "V1/Configuration/Generate default OPC UA data selection configuration file.html": {
    "href": "V1/Configuration/Generate default OPC UA data selection configuration file.html",
    "title": "Generate default OPC UA data selection configuration file",
    "keywords": "Generate default OPC UA data selection configuration file When you add a data source, the OPC UA adapter browses the entire OPC UA server address space and exports the available OPC UA variables into a JSON file for data selection. Data is collected automatically based upon user demands. OPC UA data from OPC UA variables is read through subscriptions (unsolicited reads). A default OPC UA data selection file will be created if there is no OPC UA data selection configuration, but a valid OPC UA data source exists. Note: To avoid possibly expensive browse operations, OSIsoft recommends that you manually create a data selection file instead of generating the default data selection file. For more information, see Data selection configuration . Complete the following steps in order for this default data selection file to be generated: Add an OPC UA adapter with a unique ComponentId. During the installation of Edge Data Store, enabling the OPC UA adapter results in addition of a unique component that also satisfies this condition. Configure a valid OPC UA data source . Once you complete these steps, a default OPC UA data selection configuration file will be generated in the configuration directory for the corresponding platform. The following are example locations of the file created. In this example, it is assumed that the ComponentId of the OPC UA component is the default OpcUa1: Windows: %programdata%\\OSIsoft\\EdgeDataStore\\Configuration\\OpcUa1_DataSelection.json Linux: /usr/share/OSIsoft/EdgeDataStore/Configuration/OpcUa1_DataSelection.json Copy the file to a different directory. The contents of the file will look something like: [ { \"Selected\": false, \"Name\": \"Cold Side Inlet Temperature\", \"NodeId\": \"ns=2;s=Line1.HeatExchanger1001.ColdSideInletTemperature\", \"StreamId\": null }, { \"Selected\": false, \"Name\": \"Cold Side Outlet Temperature\", \"NodeId\": \"ns=2;s=Line1.HeatExchanger1001.ColdSideOutletTemperature\", \"StreamId\": null } ] In a text editor, edit the file and change the value of any Selected key from false to true in order to transfer the OPC UA data to be stored in Edge Data Store. In the same directory where you edited the file, run the following curl command: curl -i -d \"@OpcUa1_DataSelection.json\" -H \"Content-Type: application/json\" -X PUT http://localhost:5590/api/v1/configuration/OpcUa1/Dataselection"
  },
  "V1/Configuration/Configuration.html": {
    "href": "V1/Configuration/Configuration.html",
    "title": "Configuration",
    "keywords": "Configuration"
  },
  "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA operational overview.html": {
    "href": "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA operational overview.html",
    "title": "OSIsoft Adapter for OPC UA operational overview",
    "keywords": "OSIsoft Adapter for OPC UA operational overview"
  },
  "V1/OSIsoft Adapter for OPC UA diagnostics/OSIsoft Adapter for OPC UA diagnostics.html": {
    "href": "V1/OSIsoft Adapter for OPC UA diagnostics/OSIsoft Adapter for OPC UA diagnostics.html",
    "title": "OSIsoft Adapter for OPC UA diagnostics",
    "keywords": "OSIsoft Adapter for OPC UA diagnostics"
  },
  "V1/main/V1/Troubleshooting/Troubleshooting.html": {
    "href": "V1/main/V1/Troubleshooting/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting"
  },
  "V1/main/V1/Installation/Installation.html": {
    "href": "V1/main/V1/Installation/Installation.html",
    "title": "Installation",
    "keywords": "Installation"
  },
  "V1/main/V1/Installation/Installation prerequisites.html": {
    "href": "V1/main/V1/Installation/Installation prerequisites.html",
    "title": "Installation prerequisites",
    "keywords": "Installation prerequisites OSIsoft adapters support .NET Core 3.1. You can download OSIsoft Adapter for OPC UA from the OSIsoft Customer Portal:"
  },
  "V1/main/V1/Installation/Install the adapter.html": {
    "href": "V1/main/V1/Installation/Install the adapter.html",
    "title": "Install the adapter",
    "keywords": "Install the adapter Windows To install an OSIsoft adapter on Windows, complete the following steps: Download the Windows .msi file from the OSIsoft Customer portal , for example Modbus_win10-x64.msi . Open a command prompt. Change to the directory into which you downloaded the .msi file. Run Modbus_win10-x64.msi . Result: The OSIsoft adapter is installed on Windows and you can now configure it. Linux To install an OSIsoft adapter on Linux, complete the following steps: Download the appropriate Linux distribution file from the OSIsoft Customer portal , for example Modbus_linux-x64.deb . As a superuser, open a terminal. Install the OSIsoft adapter with the sudo apt install command. For example, to install the Linux ARM Debian package, run command. sudo apt install ./Modbus_linux-x64.deb . To install the Linux x64 package, run command sudo apt install ./Modbus_linux-arm.deb . Result: The OSIsoft adapter is installed on Linux and you can now configure it."
  },
  "V1/readme.html": {
    "href": "V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/Administration.html": {
    "href": "V1/Administration.html",
    "title": "Administration",
    "keywords": "Administration"
  },
  "README.html": {
    "href": "README.html",
    "title": "OSIsoft Adapter OPC UA Docs",
    "keywords": "OSIsoft Adapter OPC UA Docs"
  },
  "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA supported features.html": {
    "href": "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA supported features.html",
    "title": "OSIsoft Adapter for OPC UA supported features",
    "keywords": "OSIsoft Adapter for OPC UA supported features Data types The following table lists OPC UA variable types that the OPC UA adapter supports data collection from and types of streams that are going to be created. OPC UA data type Stream data type Boolean Boolean Byte Int16 SByte Int16 Int16 Int16 UInt16 UInt16 Int32 Int32 UInt32 UInt32 Int64 Int64 UInt64 UInt64 Float Float32 Double Float64 DateTime DateTime String String Export operation The OPC UA adapter is able to export available OPC UA dynamic variables by browsing the OPC UA hierarchies or sub-hierarchies. Limit browsing You can limit browsing by specifying a comma-separated collection of nodeIds in data source configuration (RootNodeIds) which are treated as a roots from where the adapter starts the browse operation. The adapter triggers an export operation after a successful connection to the OPC UA server when the data selection file does not exist in configuration directory. You can copy the exported data selection JSON file from the directory or retrieve it using a REST API call. Manually create data selection file You can also create the data selection file manually in order to avoid a potentially long and expensive browse operation. You can configure it before you configure the data source or push both in one configuration call together."
  },
  "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA principles of operation.html": {
    "href": "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA principles of operation.html",
    "title": "OSIsoft Adapter for OPC UA principles of operation",
    "keywords": "OSIsoft Adapter for OPC UA principles of operation This topic provides an operational overview of the OPC UA adapter, focusing on streams creation and error handling. Adapter configuration In order for the OPC UA adapter to start data collection, you need to configure the adapter by defining the following: Data source: Provide the data source from which the adapter should collect data. Data selection: Perform selection of OPC UA items to which the adapter should subscribe for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more information, see OPC UA data source configuration and OPC UA data selection configuration . Connection The OPC UA adapter uses the binary opc.tcp protocol to communicate with the OPC UA servers. When a secured connection is enabled, the X.509-type client and server certificates are exchanged and verified and the connection between the OPC UA adapter and the configured OPC UA server is established. Stream creation The OPC UA adapter creates types upon receiving the value update for a stream. One stream is created for every selected OPC UA item in the data selection configuration. Data collection The OPC UA adapter collects time-series data from selected OPC UA dynamic variables through OPC UA subscriptions (unsolicited reads). The adapter supports the Data Access (DA) part of OPC UA specification. Streams by OPC UA adapter The OPC UA adapter creates a stream with two properties per selected OPC UA item. The properties are described in the following table: Property name Data type Description Timestamp DateTime Timestamp of the given OPC UA item value update. Value Based on type of incoming OPC UA value Value of the given OPC UA item update. Stream ID is a unique identifier for each stream created by the adapter for a given OPC UA item. If the Custom Stream ID is specified for the OPC UA item in data selection configuration, the OPC UA adapter uses that as a stream ID for the stream. Otherwise, the adapter constructs the stream ID using the following format constructed from the OPC UA item node ID: <Adapter Component ID>.<Namespace>.<Identifier> Note: The naming convention is affected by StreamIdPrefix and ApplyPrefixToStreamID settings in data source configuration. For more informaton, see OPC UA data source configuration ."
  },
  "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA overview.html": {
    "href": "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA overview.html",
    "title": "OSIsoft Adapter for OPC UA overview",
    "keywords": "OSIsoft Adapter for OPC UA overview OPC UA is an open standard, which ensures interoperability, security, and reliability of industrial automation devices and systems. OPC UA is recognized as one of the key communication and data modeling technologies of Industry 4.0, due to the fact that it works with many software platforms, and is completely scalable and flexible. The OPC UA adapter transfers time-series data from OPC UA devices into Edge Data Store. As with other adapters, the OPC UA adapter is configured with data source and data selection JSON documents. The data source configurations are identical with other adapters, but OPC UA supports an option to generate a data selection file template that you can manually edit and use for subsequent configuration. For details, see Configure data selection . Once you create a template file, you can reuse it on both Linux and Windows without changes. For more information on how to configure logging for the OPC UA adapter, see Configure message logging ."
  },
  "V1/main/V1/Troubleshooting/Logging.html": {
    "href": "V1/main/V1/Troubleshooting/Logging.html",
    "title": "Logging",
    "keywords": "Logging"
  }
}