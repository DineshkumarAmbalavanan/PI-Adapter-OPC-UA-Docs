{
  "README.html": {
    "href": "README.html",
    "title": "OSIsoft Adapter OPC UA Docs",
    "keywords": "OSIsoft Adapter OPC UA Docs"
  },
  "V1/ARCHIVE/OSIsoft Adapter for OPC UA supported features.html": {
    "href": "V1/ARCHIVE/OSIsoft Adapter for OPC UA supported features.html",
    "title": "OSIsoft Adapter for OPC UA supported features",
    "keywords": "OSIsoft Adapter for OPC UA supported features Data types The following table lists OPC UA variable types that the adapter supports data collection from and types of streams that are going to be created. OPC UA data type Stream data type Boolean Boolean Byte Int16 SByte Int16 Int16 Int16 UInt16 UInt16 Int32 Int32 UInt32 UInt32 Int64 Int64 UInt64 UInt64 Float Float32 Double Float64 DateTime DateTime String String Export operation The adapter is able to export available OPC UA dynamic variables by browsing the OPC UA hierarchies or sub-hierarchies. Export operation actions To limit browsing, specify a comma-separated collection of nodeIds in data source configuration (RootNodeIds). Note: They are treated as roots from where the adapter starts the browse operation. The adapter triggers an export operation after a successful connection to the OPC UA server when the data selection file does not exist in configuration directory. Copy the exported data selection JSON file from the directory or retrieve it using a REST API call. Optional: To avoid a potentially long and expensive browse operation, create the data selection file manually. Configure it before you configure the data source or push both in one configuration call together."
  },
  "V1/Configuration/Configuration.html": {
    "href": "V1/Configuration/Configuration.html",
    "title": "Configuration",
    "keywords": "Configuration OSIsoft Adapter for OPC UA provides configuration of data source and data selection. The adapter also provides configuration of security and the ability to generate a data selection file instead of manual configuration. The examples in the configuration topics use curl, a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/Configuration/OSIsoft Adapter for OPC UA data selection configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for OPC UA data selection configuration.html",
    "title": "OSIsoft Adapter for OPC UA data selection configuration",
    "keywords": "OSIsoft Adapter for OPC UA data selection configuration In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the adapter to collect from the data sources. When you add a data source, the adapter browses the entire OPC UA server address space and exports the available OPC UA variables into a JSON file for data selection. Comma-separated collection of nodeIds (RootNodeIds) serve as filters to browse only a subset of the OPC UA server. Data is collected automatically based upon user demands. OPC UA data from OPC UA variables is read through subscriptions (unsolicited reads). You can either have the data selection configuration file generated for you or you can create it manually yourself. Generate default OPC UA data selection configuration file A default OPC UA data selection file will be created if there is no OPC UA data selection configuration, but a valid OPC UA data source exists. Note: To avoid possible time and resource expensive browse operations due to reasons described previously, OSIsoft recommends that you manually create a data selection file instead of generating the default data selection file. For more information, see Configure OPC UA data selection . Complete the following procedure for this default data selection file to be generated: Add an OPC UA adapter with a unique ComponentId. For more information, see System components configuration . Configure a valid OPC UA data source. For more information, see OSIsoft Adapter for OPC UA data source configuration . Once you complete these steps, a default OPC UA data selection configuration file will be generated in the configuration directory for the corresponding platform. The following are example locations of the file created. In this example, it is assumed that the ComponentId of the OPC UA component is OpcUa1: Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\OpcUa\\Configuration\\OpcUa1_DataSelection.json Linux: /usr/share/OSIsoft/Adapters/OpcUa/OpcUa/Configuration/OpcUa1_DataSelection.json Copy the file to a different directory. For content structure, see OPC UA data selection example . Using any text editor, change the value of any Selected key from false to true in the file. Once the configuration is updated, the adapter will subscribe to data for all items that are set to Selected=true . In the same directory where you edited the file, run the following curl command: Note: 5590 is the default port number. If you selected a different port number, replace it with that value. curl -i -d \"@OpcUa1_DataSelection.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OpcUa1/Dataselection\" Configure OPC UA data selection Note: You cannot modify OPC UA data selection configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following to configure the OPC UA data selection: Using any text editor, create a file that contains an OPC UA data selection in JSON form. For content structure, see OPC UA data selection example . For a table of all available parameters, see OPC UA data selection . Save the file, for example as DataSelection.config.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<adapterId>/DataSelection/ Example using curl (run this command from the same directory where the file is located): Note: The following example uses OpcUa1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. curl -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OpcUa1/DataSelection\" OPC UA data selection schema The full schema definition for the OPC UA data selection configuration is in the OpcUa_DataSelection_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\OpcUa\\Schemas Linux: /opt/OSIsoft/Adapters/OpcUa/Schemas OPC UA data selection parameters The following parameters are available for configuring an OPC UA data selection: Parameter Required Type Description Selected Optional boolean Use this field to select or clear a measurement. To select an item, set to true. To remove an item, leave the field empty or set to false. If not configured, the default value is true. Name Required string The optional friendly name of the data item collected from the data source. NodeId Required string The NodeId of the variable. Examples \"ns=5;AString\" \"ns=2;i=203\" \"ns=<NamespaceIndex>;<IdentifierType>=<Identifer>\" StreamID Optional string The custom stream ID used to create the streams. If not specified, the adapter will generate a default stream ID based on the measurement configuration. A properly configured custom stream ID follows these rules: Is not case-sensitive. Can contain spaces. Cannot start with two underscores (\"__\"). Can contain a maximum of 100 characters. Cannot use the following characters: / : ? # [ ] @ ! $ & ' ( ) \\ * + , ; = % < > | Cannot start or end with a period. Cannot contain consecutive periods. Cannot consist of only periods. OPC UA data selection example The following are examples of valid OPC UA data selection configurations: Minimum data selection configuration : [ { \"Name\": \"Random1\", \"NodeId\": \"ns=5;s=Random1\" }, { \"Name\": \"Sawtooth1\", \"NodeId\": \"ns=5;s=Sawtooth1\" }, { \"Name\": \"Sinusoid1\", \"NodeId\": \"ns=5;s=Sinusoid1\" } ] Maximum data selection configuration : [ { \"Selected\": true, \"Name\": \"Random1\", \"NodeId\": \"ns=5;s=Random1\", \"StreamId\": \"CustomStreamName\" }, { \"Selected\": false, \"Name\": \"Sawtooth1\", \"NodeId\": \"ns=5;s=Sawtooth1\", \"StreamId\": null }, { \"Selected\": true, \"Name\": \"Sinusoid1\", \"NodeId\": \"ns=5;s=Sinusoid1\", \"StreamId\": null } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSelection GET Retrieves the OPC UA data selection configuration api/v1/configuration/ ComponentId /DataSelection PUT Configures or updates the OPC UA data selection configuration api/v1/configuration/ ComponentId /DataSelection DELETE Deletes the OPC UA data selection configuration Note: Replace ComponentId with the Id of your OPC UA component, for example OpcUa1."
  },
  "V1/Configuration/OSIsoft Adapter for OPC UA data source configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for OPC UA data source configuration.html",
    "title": "OSIsoft Adapter for OPC UA data source configuration",
    "keywords": "OSIsoft Adapter for OPC UA data source configuration To use the adapter, you must configure the data source from which it will be polling data. Configure OPC UA data source Note: You cannot modify OPC UA data source configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following procedure to configure the OPC UA data source: Using any text editor, create a file that contains an OPC UA data source in JSON form. For content structure, see OPC UA data source examples . For a table of all available parameters, see OPC UA data source parameters . Save the file, for example as DataSource.config.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<adapterId>/DataSource/ . Note: The following example uses OpcUa1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@DataSource.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OpcUa1/DataSource\" Note: After you have completed data source configuration, the next step is to configure data selection. You can either have a default data selection file generated or you can create the data selection file yourself. For more information, see OSIsoft Adapter for OPC UA data selection configuration . OPC UA data source schema The full schema definition for the OPC UA data source configuration is in the OpcUa_DataSource_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\OpcUa\\Schemas Linux: /opt/OSIsoft/Adapters/OpcUa/Schemas OPC UA data source parameters The following parameters are available for configuring an OPC UA data source: Parameter Required Type Description EndpointURL Required string The endpoint URL of the OPC UA server in opc.tcp format. The following is an example of the URL format: opc.tcp://OPCServerHost:Port/OpcUa/SimulationServer Note: If you change the EndpointURL on a configured adapter that has ComponentID_DataSelection.json file exported, you need to remove the ComponentID_DataSelection.json file from the configuration directory to trigger a new browse (export). UseSecureConnection Optional boolean When set to true, the adapter connects to a secure endpoint using OPC UA certificate exchange operation. The default is true. When set to false, the adapter connects to an unsecured endpoint of the server and certificate exchange operation is not required. Note: OSIsoft recommends setting this option to false for testing purposes only. UserName Optional string User name for accessing the OPC UA server. Password Optional string Password for accessing the OPC UA server. Note: OSIsoft recommends using REST to configure the data source when the password must be specified because REST will encrypt the password. If you do not use REST, the plain text password will be stored on-disk. RootNodeIds Optional string List of comma-separated NodeIds of those objects from which the adapter browses the OPC UA server address space. This option allows selecting only subsets of the OPC UA address by explicitly listing one or more NodeIds which are used to start the initial browse. Examples: \"ns=5;s=85/0:Simulation\" \"ns=3;s=DataItems\" If not specified, it means that the whole address space will be browsed. IncomingTimestamp Optional string Specifies whether the incoming timestamp is taken from the source, from the OPC UA server, or should be created by the adapter instance. Source - Default and recommended setting. The timestamp is taken from the source timestamp field. The source is what provides data for the item to the OPC UA server, such as a field device. Server - In case the OPC UA item has an invalid source timestamp field, the Server timestamp can be used. Adapter - The adapter generates a timestamp for the item upon receiving it from the OPC UA server. StreamPrefix Optional string Specifies what prefix is used for Stream IDs and names. Naming convention is StreamPrefixNodeId and StreamPrefixName. Note: An empty string means no prefix will be added to the Stream IDs and names. Null value means ComponentID followed by dot character will be added to the stream IDs and names (for example, OpcUa1.NodeId). ApplyPrefixToStreamId Optional boolean Parameter applied to all data items collected from the data source that have custom stream ID configured. If set to true , the adapter will apply the StreamPrefix property to all streams with custom ID configured. The property does not affect any streams with default ID configured. OPC UA data source examples The following are examples of valid OPC UA data source configurations: Minimum data source configuration { \"EndpointUrl\": \"opc.tcp://<IP-Address>:<Port>/<TestOPCUAServer>\" } Maximum data source configuration { \"EndpointUrl\": \"opc.tcp://<IP-Address>:<Port>/<TestOPCUAServer>\", \"UseSecureConnection\": true, \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"StreamPrefix\": null, \"ApplyPrefixToStreamId\": false } REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSource GET Retrieves the OPC UA data source configuration api/v1/configuration/ ComponentId /DataSource POST Creates the OPC UA data source configuration api/v1/configuration/ ComponentId /DataSource PUT Configures or updates the OPC UA data source configuration api/v1/configuration/ ComponentId /DataSource DELETE Deletes the OPC UA data source configuration Note: Replace ComponentId with the Id of your OPC UA component, for example OpcUa1."
  },
  "V1/Configuration/OSIsoft Adapter for OPC UA security configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for OPC UA security configuration.html",
    "title": "OSIsoft Adapter for OPC UA security configuration",
    "keywords": "OSIsoft Adapter for OPC UA security configuration The OPC UA security standard is concerned with the authentication of client and server applications, the authentication of users and confidentiality of their communication. As the security model relies heavily on Transport Level Security (TLS) to establish a secure communication link with an OPC UA server, each client, including the adapter, must have a digital certificate deployed and configured. Certificates uniquely identify client applications and machines on servers, and allow for creation of a secure communication link when trusted on both sides. The adapter generates a self-signed certificate when the first secure connection attempt is made. Each adapter instance creates a certificate store where its own certificates, as well as those of the server, will be persisted. Configure OPC UA adapter security Complete the following procedure to configure adapter security: In your data source configuration, set UseSecureConnection to true . For more information, see OSIsoft Adapter for OPC UA data source configuration . The adapter verifies whether the server certificate is present in the adapter trusted certificates folder and is therefore trusted. In case the certificates were not exchanged before the first attempted connection, the adapter persists the server certificate within the adapter rejected certificates folder and the following warning message about the rejected server certificate will be printed: ~~2019-09-08 11:45:48.093 +01:00~~ [Warning] Rejected Certificate: \"DC=MyServer.MyDomain.int, O=OSIsoft, CN=Simulation Manually move the server certificate from the Adapter rejected certificates location to the Adapter trusted certificates location using a file explorer or command-line interpreter. Linux example using command-line: sudo mv /usr/share/OSIsoft/Adapters/OpcUa/OpcUa/OpcUa1/Certificates/RejectedCertificates/certs/'SimulationServer [F9823DCF607063DBCECCF6F8F39FD2584F46AEBB].der' /usr/share/OSIsoft/Adapters/OpcUa/OpcUa/OpcUa1/Certificates/Trusted/certs/OpcUa1/Certificates/Trusted/certs/ Note: Administrator or root privileges are required to perform this operation. Once the certificate is in the adapter trusted certificates folder, the adapter trusts the server and the connection attempt proceeds in making the connection call to the configured server. Add the certificate of the adapter to the server's trust store. The connection succeeds only when the adapter certificate is trusted on the server side. For more details on how to make a client certificate trusted, see your OPC UA server documentation. In general, servers work in a similar fashion to the clients, hence you can take a similar approach for making the client certificate trusted on the server side. When certificates are mutually trusted, the connection attempt succeeds and the adapter is connected to the most secure endpoint provided by the server. Certificate locations Adapter rejected certificates Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\OpcUa\\{ComponentId}\\Certificates\\RejectedCertificates\\certs Linux: /usr/share/OSIsoft/Adapters/OpcUa/OpcUa/{ComponentId}/Certificates/RejectedCertificates/certs Adapter trusted certificates Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\OpcUa\\{ComponentId}\\Certificates\\Trusted\\certs Linux: /usr/share/OSIsoft/Adapters/OpcUa/OpcUa/{ComponentId}/Certificates/Trusted/certs Certificate of the adapter Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\OpcUa\\{ComponentId}\\Certificates\\My\\certs Linux: /usr/share/OSIsoft/Adapters/OpcUa/OpcUa/{ComponentId}/Certificates/My/certs"
  },
  "V1/index.html": {
    "href": "V1/index.html",
    "title": "OSIsoft Adapter for OPC UA",
    "keywords": "OSIsoft Adapter for OPC UA ======= OSIsoft Adapter for OPC UA overview OSIsoft Adapter for OPC UA principles of operation Installation Install the adapter Uninstall the adapter Configuration Configuration tools System components configuration OSIsoft Adapter for OPC UA data source configuration OSIsoft Adapter for OPC UA data selection configuration OSIsoft Adapter for OPC UA security configuration Egress endpoints configuration Health endpoint configuration Diagnostics configuration Buffering configuration Logging configuration System and adapter configuration Administration Start and stop an adapter Start and stop ingress component Retrieve product version information Delete an adapter component Health and diagnostics Adapter health Device status Next health message expected Adapter diagnostics System Stream count IO rate Error rate Egress diagnostics"
  },
  "V1/main/README.html": {
    "href": "V1/main/README.html",
    "title": "OSIsoft Adapter Docs",
    "keywords": "OSIsoft Adapter Docs"
  },
  "V1/main/test.html": {
    "href": "V1/main/test.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Administration/Administration.html": {
    "href": "V1/main/V1/Administration/Administration.html",
    "title": "Administration",
    "keywords": "Administration With the OSIsoft adapter administration level functions, you can start and stop an adapter service and the individual adapter ingress components. You can also retrieve product version information and delete an adapter. The examples in the administration topics use curl, a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure OSIsoft adapters with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can accomplish data retrieval steps (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Administration/Delete an adapter component.html": {
    "href": "V1/main/V1/Administration/Delete an adapter component.html",
    "title": "Delete an adapter component",
    "keywords": "Delete an adapter component When an adapter component is removed, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data will remain on respective endpoints. Complete the following procedure to delete an adapter component: Start any of the Configuration tools capable of making HTTP requests. Execute a DELETE command to the following endpoint: http://localhost:5590/api/v1/configuration/system/components/<ComponentId> Note: An empty DELETE command must be made against the Id of the component to be deleted. 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Delete OpcUa1 adapter component : curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1\" File relocation All configuration and log files will be renamed and moved.The files are renamed according to the timestamp of removal, for example FileName.json_removed_yyyy-MM-dd--hh-mm-ss . Configuration files will be moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Configuration\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Configuration/Removed Log files will be moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Logs\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Logs/Removed In the following example, one Modbus Adapter service is installed on a particular Windows node with the name ModbusService1. A Modbus component with the name ModbusDeviceX was added and configured to this Modbus adapter and later removed. Linux follows a similar behavior. This is the resulting relocation and renaming scheme after deletion: REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/ ComponentId DELETE Deletes specified component Note: Replace ComponentId with the Id of the component that you want to delete."
  },
  "V1/main/V1/Administration/Retrieve product version information.html": {
    "href": "V1/main/V1/Administration/Retrieve product version information.html",
    "title": "Retrieve product version information",
    "keywords": "Retrieve product version information The product version information includes the application version, the version of the underlying .NET Core Framework, and the operating system that the adapter is running on. Complete the following procedure to retrieve the product version information of an OSIsoft adapter: Start any configuration tool capable of making HTTP requests. Execute a GET command to the following endpoint: http://localhost:5590/api/v1/Diagnostics/ProductInformation Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Get product information for adapter hosted on port 5590 : curl -d \"\" -X GET \"http://localhost:5590/api/v1/Diagnostics/ProductInformation Example result: { \"Application Version\": \"1.1.0.30\", \".Net Core Version\": \".NET Core 3.1.1\", \"Operating System\": \"Microsoft Windows 10.0.17134\" }"
  },
  "V1/main/V1/Administration/Start and stop an adapter.html": {
    "href": "V1/main/V1/Administration/Start and stop an adapter.html",
    "title": "Start and stop an adapter",
    "keywords": "Start and stop an adapter Complete one of the following procedures for your operating system to start or stop an adapter service: Windows Open Windows services. Select OSIsoft Adapter for AdapterName , for example OSIsoft Adapter for Modbus. Depending on whether your adapter is running or not, click either Start or Stop . Linux Open command line. Depending on whether your adapter is running or not, type one of the following: Example: Start OSIsoft Adapter for OPC UA systemctl start OSIsoft Adapter for OPC UA Example: Stop OSIsoft Adapter for Modbus TCP systemctl stop OSIsoft Adapter for Modbus Press Enter."
  },
  "V1/main/V1/Administration/Start and stop ingress component.html": {
    "href": "V1/main/V1/Administration/Start and stop ingress component.html",
    "title": "Start and stop ingress component",
    "keywords": "Start and stop ingress component To control data ingress, the ingress components of an adapter can be started and stopped whenever necessary. By default, all currently configured ingress components are started. Start an ingress component Complete the following procedure to start an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to start: http://localhost:5590/api/v1/administration/<ingressComponentId>/Start Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Start the OpcUa1 ingress component : curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/OpcUa1/Start\" Stop an ingress component Complete the following procedure to stop an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to stop: http://localhost:5590/api/v1/administration/<ingressComponentId>/Stop Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Stop the Modbus1 ingress component : curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/Modbus1/Stop\""
  },
  "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html": {
    "href": "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics OSIsoft adapters produce diagnostic data which you can use to find more information about a particular adapter instance. This data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For configuration of health endpoints, see </Health/Health.md>. AF hierarchy When you use PI Web API as a health endpoint, an AF hierarchy is created containing both the diagnostics and health data and metadata. Currently, OSIsoft Cloud Services does not provide a way to store static metadata and only contains the dynamic streams. For more information or to see an example of this hierarchy, see </Health/Health.md>. Stream count The stream count indicates the number of streams and associated types being produced and sent data for a particular adapter instance. Type Property Description string Timestamp Timestamp of event int StreamCount Overall number of streams created by the adapter instance int TypeCount Overall number of types created by the adapter instance IO rate The IO rate indicates the running average number of streams per second being produced by an adapter instance. Type Property Description string Timestamp Timestamp of event double IORate Average data rate (streams/second) Error rate The error rate indicates the average number of errors per second occurring for a particular adapter instance. Type Property Description string Timestamp Timestamp of event double ErrorRate Average error rate (streams/second)"
  },
  "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html": {
    "href": "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html",
    "title": "Egress endpoint configuration schema",
    "keywords": "Egress endpoint configuration schema [{ \"endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }, { \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } ] Abstract Extensible Status Identifiable Custom Properties Additional Properties Defined In Can be instantiated Yes Experimental No Forbidden Forbidden Egress_DataEndpoints_schema.json EgressEndpointConfiguration Properties Property Type Required Nullable Defined by ClientId string Optional Yes EgressEndpointConfiguration (this schema) ClientSecret string Optional Yes EgressEndpointConfiguration (this schema) Endpoint string Required No EgressEndpointConfiguration (this schema) Id string Optional Yes EgressEndpointConfiguration (this schema) Password string Optional Yes EgressEndpointConfiguration (this schema) TokenEndpoint string Optional Yes EgressEndpointConfiguration (this schema) UserName string Optional Yes EgressEndpointConfiguration (this schema) ValidateEndpointCertificate boolean Optional No EgressEndpointConfiguration (this schema) ClientId ClientId is optional type: string defined in this schema ClientId Type string , nullable ClientSecret ClientSecret is optional type: string defined in this schema ClientSecret Type string , nullable Endpoint Endpoint is required type: string defined in this schema Endpoint Type string minimum length: 1 characters Id Id is optional type: string defined in this schema Id Type string , nullable Password Password is optional type: string defined in this schema Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string defined in this schema TokenEndpoint Type string , nullable UserName UserName is optional type: string defined in this schema UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean defined in this schema ValidateEndpointCertificate Type boolean All of the following requirements need to be fulfilled. Requirement 1 object with following properties: Property Type Required ClientId string Optional ClientSecret string Optional Endpoint string Required Id string Optional Password string Optional TokenEndpoint string Optional UserName string Optional ValidateEndpointCertificate boolean Optional ClientId ClientId is optional type: string ClientId Type string , nullable ClientSecret ClientSecret is optional type: string ClientSecret Type string , nullable Endpoint Endpoint is required type: string Endpoint Type string minimum length: 1 characters Id Id is optional type: string Id Type string , nullable Password Password is optional type: string Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string TokenEndpoint Type string , nullable UserName UserName is optional type: string UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean ValidateEndpointCertificate Type boolean"
  },
  "V1/main/V1/Configuration/Buffering configuration.html": {
    "href": "V1/main/V1/Configuration/Buffering configuration.html",
    "title": "Buffering configuration",
    "keywords": "Buffering configuration OSIsoft adapters can be configured to buffer data egressed from the adapter to endpoints. Buffering is configured through the buffering configuration parameters in the system configuration. Note: OSIsoft recommends that you do not modify the default buffering location unless necessary. The changes to the buffering configuration parameters take effect only during adapter service startup. Configure buffering Using any text editor, create a file that contains the buffering configuration in JSON form. For content structure, see the sample output in Examples - Retrieve the buffering configuration . For a table of all available parameters, see Buffering parameters . Save the file, for example as Buffering.json . Use any of the Configuration tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/buffering Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@Buffering.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/buffering\" Buffering schema The full schema definition for the system buffering is in the System_Buffering_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Buffering parameters The following parameters are available for configuring buffering: Parameter Required Type Description EnableBuffering Optional boolean Enables or disables buffering. Default: True Note: If you disable buffering, in-memory buffering will be used. In-memory buffering is limited to 20 MB per endpoint. MaxBufferSizeMB Optional integer Defines the maximum size of the buffer file that will be persisted on disk. The unit is specified in MB (1 Mebibyte = 1048576 bytes). Take into account the capacity and type of the storage medium to determine a suitable value for this parameter. A value of -1 indicates that the buffer file size is restricted only by the available free disk space. Allowed values: -1 or [1, 2147483647]. Default: -1 BufferLocation Required string Defines the location of the buffer files. Absolute paths are required. Take into account access-control list (ACL) when setting this parameter Allowed value: Valid path to a folder location in the file system. Default: Windows: %ProgramData%\\OSIsoft\\Adapters\\{AdapterType}\\{AdapterInstance}\\Buffers Linux: /usr/share/OSIsoft/Adapters/{AdatpterType}/{AdapterInstance}/Buffers Examples The following examples are buffering configurations made through curl REST client. Retrieve the buffering configuration curl -X GET \"http://localhost:5590/api/v1/configuration/system/buffering\" Sample output: { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Modbus/Buffers\", \"maxBufferSizeMB\": -1, \"enableBuffering\": true } 200 OK response indicates success. Update MaxBuferSizeMb parameter curl -d \"{ \"MaxBufferSizeMB\": 100 }\" -H \"Content-Type: application/json\" -X PATCH \"http://localhost:5590/api/v1/configuration/system/buffering\" 204 No Content response indicates success. REST URLs Relative URL HTTP verb Action api/v1/configuration/system/buffering GET Gets the buffering configuration api/v1/configuration/system/buffering PUT Replaces the existing buffering configuration api/v1/configuration/system/buffering PATCH Update parameter, partial configuration"
  },
  "V1/main/V1/Configuration/Configuration tools.html": {
    "href": "V1/main/V1/Configuration/Configuration tools.html",
    "title": "Configuration tools",
    "keywords": "Configuration tools OSIsoft adapters can be configured with either the EdgeCmd utility, OSIsoft's proprietary tool for configuring adapters, or a commonly-used REST tool. EdgeCmd utility The EdgeCmd utility enables adapter configuration on both Linux and Windows operating systems. For more information on using the EdgeCmd utility, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . REST tools The following tools are available to make REST calls. curl curl is a command line tool used to make HTTP calls and is supported on both Windows and Linux operating systems. curl is easily scripted using Bash or PowerShell on either Linux or Windows, and can be used to perform adapter administrative and programming tasks. curl commands are used in configuration and management examples throughout this document. For more information, see curl (https://curl.haxx.se/) . Postman Postman is a REST tool for systems with GUI components. OSIsoft adapters are supported on platforms without GUIs. Postman is particularly useful for learning more about OSIsoft adapter REST APIs. For more information, see Postman (https://www.postman.com/) ."
  },
  "V1/main/V1/Configuration/Diagnostics configuration.html": {
    "href": "V1/main/V1/Configuration/Diagnostics configuration.html",
    "title": "Diagnostics configuration",
    "keywords": "Diagnostics configuration OSIsoft adapters can be configured to produce and store diagnostics data at a designated health endpoint. For more information about adapter diagnostics, see Adapter diagnostics . Configure diagnostics Start any of the Configuration tools capable of making HTTP requests. Execute a PUT command to the following endpoint, setting the enableDiagnostics parameter to either true or false : http://localhost:5590/api/v1/configuration/system/diagnostics Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl: curl -d \"{ \"enableDiagnostics\":true }\" -H \"Content-Type:application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/diagnostics\" Diagnostics schema The full schema definition for the diagnostics configuration is in the System_Diagnostics_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Diagnostics parameters The following parameters are available for configuring diagnostics: Parameter Required Type Description EnableDiagnostics Required boolean Determines whether Diagnostics are enabled. Example Retrieve the diagnostics configuration Example using curl: curl -X GET \"http://localhost:{port}/api/v1/configuration/system/diagnostics\" Sample output: { \"enableDiagnostics\": true } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/diagnostics GET Gets the diagnostics configuration api/v1/configuration/system/diagnostics PUT Replaces the existing diagnostics configuration"
  },
  "V1/main/V1/Configuration/Egress endpoints configuration.html": {
    "href": "V1/main/V1/Configuration/Egress endpoints configuration.html",
    "title": "Egress endpoints configuration",
    "keywords": "Egress endpoints configuration Adapters can egress dynamic data to destinations that you supply through OMF. Supported destinations are OSIsoft Cloud Services and PI servers through PI Web API. An egress endpoint represents a destination to which data will be sent. You can specify multiple endpoints. Every egress endpoint is executed independently of all other egress endpoints and is expected to accept OMF messages. An egress endpoint is comprised of the properties specified under Egress endpoint parameters . Configure egress endpoints Note: You cannot add egress configurations manually because some parameters are encrypted when stored to disk. You must use the REST endpoints to add or edit egress configuration. For additional endpoints, see REST URLs . Complete the following procedure to create new egress endpoints: Using any text editor, create a file that contains one or more egress endpoints in JSON form. For content structure, see Examples . For a table of all available parameters, see Egress endpoint parameters . Save the file, for example as OmfEgress_DataEndpoints.json . Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Examples using curl (run the commands from the same directory where the file is located): Add endpoints curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" Delete an endpoint curl -X DELETE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" Update an endpoint curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X UPDATE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" View endpoints curl -X GET \"http://localhost:5590/api/v1/configuration/OmfEgress/DataEndpoints\" Egress endpoint configuration schema The full schema definition for the egress endpoint configuration is in the OmfEgress_DataEndpoints_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Egress endpoint parameters The following parameters are available for configuring egress endpoints: Parameter Required Type Description Id Optional string Unique identifier Endpoint Required string Destination that accepts OMF v1.1 messages. Supported destinations include OCS and PI server. Username Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint. Password Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint. ClientId Required for OCS endpoint string Authentication with the OCS OMF endpoint. ClientSecret Required for OCS endpoint string Authentication with the OCS OMF endpoint. TokenEndpoint Optional for OCS endpoint string Retrieves an OCS token from an alternative endpoint. ValidateEndpointCertificate Optional boolean Disables verification of destination certificate. Use for testing only with self-signed certificates. Defaults to true. Examples The following examples are valid egress configurations. Egress data to OCS [{ \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" }] Egress data to PI Web API [{ \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/omfegress/DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/omfegress/DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/omfegress/DataEndpoints/{id} GET Gets configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} DELETE Deletes configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} PUT Replaces egress endpoint by id . Fails if endpoint doesn't exist api/v1/configuration/omfegress/DataEndpoints/{id} PATCH Allows partial updating of configured endpoint by id Egress execution details After you add configuration for an egress endpoint, egress will be executed immediately for that endpoint. Egress is handled individually per configured endpoint. On first execution, types and containers will be egressed. After that only new or changed types or containers will be egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If an egress endpoint is removed, data flow will immediately stop for that endpoint. Buffered data of a removed endpoint will be permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the destination, failure to add a single item will result in the message failing. Types, containers, and data will continue to be egressed as long as the destination continues to respond to HTTP requests - retrying previous failures as needed."
  },
  "V1/main/V1/Configuration/Health endpoint configuration.html": {
    "href": "V1/main/V1/Configuration/Health endpoint configuration.html",
    "title": "Health endpoint configuration",
    "keywords": "Health endpoint configuration OSIsoft adapters can be configured to produce and store health data at a designated health endpoint. For more information about adapter health, see Adapter health . Configure health endpoint A health endpoint designates an OSIsoft OMF endpoint where adapter health information should be sent. You can configure multiple health endpoints. Using any text editor, create a file that contains one or more health endpoints in JSON form. For content structure, see Examples . For a table of all available health endpoint parameters, see Health endpoint parameters . Save the file, for example as HealthEndpoints.json . Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@HealthEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/healthendpoints\" Health endpoints schema The full schema definition for the health endpoint configuration is in the System_HealthEndpoints_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Health endpoint parameters The following parameters are available for configuring health endpoints: Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Endpoint Required string The URL of the OMF endpoint to receive this health data. Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint. Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint. ClientId Required for OCS endpoints string The Client Id used for authentication with an OSIsoft Cloud Services OMF endpoint. ClientSecret Required for OCS endpoints string The Client Secret used for authentication with an OSIsoft Cloud Services OMF endpoint. TokenEndpoint Optional for OCS endpoints string Retrieves an OCS token from an alternative endpoint. ValidateEndpointCertificate Optional boolean Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends setting this to true in production environments. Defaults to true. Examples OCS endpoint { \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } PI Web API endpoint { \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/healthEndpoints GET Gets all configured health endpoints api/v1/configuration/system/healthEndpoints DELETE Deletes all configured health endpoints api/v1/configuration/system/healthEndpoints POST Adds an array of health endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/system/healthEndpoints PUT Replaces all health endpoints api/v1/configuration/system/healthEndpoints/ id GET Gets configured health endpoint by id api/v1/configuration/system/healthEndpoints/ id DELETE Deletes configured health endpoint by id api/v1/configuration/system/healthEndpoints/ id PUT Replaces health endpoint by id . Fails if endpoint doesn't exist api/v1/configuration/system/healthEndpoints/ id PATCH Allows partial updating of configured health endpoint by id Note: Replace id with the Id of the health endpoint."
  },
  "V1/main/V1/Configuration/Logging configuration.html": {
    "href": "V1/main/V1/Configuration/Logging configuration.html",
    "title": "Logging configuration",
    "keywords": "Logging configuration OSIsoft adapters write daily log messages for the adapter, the system, and omf egress to flat text files in the following locations: • Windows: %ProgramData%\\OSIsoft\\Adapters\\adapterName\\adapterServiceName\\Logs • Linux: /usr/share/OSIsoft/Adapters/adapterName/adapterServiceName/Logs Each message in the log displays the message severity level, timestamp, and the message itself. Configure logging Complete the following procedure to change the logging configuration: Using any text editor, create a file that contains the logging configuration in JSON form. For content structure, see Example . For all available parameters, see Logging parameters . Save the file, for example as Component_Logging.json . Use any of the Configuration tools capable of making HTTP requests to execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Logging . Note: Replace <ComponentId> with the ComponentId of the adapter, for example OpcUa1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@Component_Logging.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/Logging\" On successful execution, the log level change takes effect immediately during runtime. The other configurations (log file size and file count) get updated after the adapter is restarted. Note: Any parameter not specified in the updated configuration file will revert to the default schema value. Logging schema The full schema definition for the logging configuration is in the component specific logging file: AdapterName_Logging_schema.json , OmfEgress_Logging_schema.json , or System_Logging_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Logging parameters The following parameters are available for configuring logging: Parameter Required Type Description logLevel Optional reference The logLevel sets the minimum severity for messages to be included in the logs. Messages with a severity below the level set are not included. The log levels in their increasing order of severity are as follows: Trace, Debug, Information, Warning, Error, Critical, None. For detailed information about the logLevels, see LogLevel . logFileSizeLimitBytes Optional integer The maximum size in bytes of log files that the service will create for the component. It must be a positive integer. logFileCountLimit Optional integer The maximum number of log files that the service will create for the component. It must be a positive integer. LogLevel Level Description Trace Logs that contain the most detailed messages. These messages may contain sensitive application data like actual received values, which is why these messages shouldn’t be enabled in production environment. Debug Logs that can be used to troubleshoot data flow issues by recording metrics and detailed flow related information. Information Logs that track the general flow of the application. Any non-repetitive general information (like version information relating to the software at startup, what external services are being used, data source connection string, number of measurements, egress URL, change of state “Starting”, “Stopping”, or configuration) can be useful for diagnosing potential application errors. Warning Logs that highlight an abnormal or unexpected event in the application flow, but does not otherwise cause the application execution to stop. Warning messages can indicate an unconfigured data source state, that a communication with backup failover instance has been lost, an insecure communication channel in use, or any other event that could require attention, but that does not impact data flow. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure. This can indicate an invalid configuration, unavailable external endpoint, internal flow error, and so on. Critical Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. This can indicate application wide failures like beta timeout expired, unable to start self-hosted endpoint, unable to access vital resource (for example, Data Protection key file), and so on. None Logging is disabled for the given component. Example Default logging configuration By default, logging captures Information, Warning, Error, and Critical messages in the message logs. The following logging configuration is the default for a component on install: { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 } REST URLs Relative URL HTTP verb Action api/v1/configuration/System/Logging GET Retrieves the system logging configuration api/v1/configuration/System/Logging PUT Updates the system logging configuration api/v1/configuration/ ComponentId /Logging GET Retrieves the logging configuration of the specified adapter component api/v1/configuration/ ComponentId /Logging PUT Updates the logging configuration of the specified adapter component Note: Replace ComponentId with the Id of your adapter component, for example Modbus1 or OpcUa1."
  },
  "V1/main/V1/Configuration/System and adapter configuration.html": {
    "href": "V1/main/V1/Configuration/System and adapter configuration.html",
    "title": "System and adapter configuration",
    "keywords": "System and adapter configuration The System and adapter components can be configured together using a single call for replacing the existing configuration. Change system and adapter configuration Change the system and adapter configuration by importing the JSON file using a REST client: Using any text editor, create a file that contains the System and adapter configuration in JSON form. For content structure, see Example . Save the file, for example as SystemAdapter.config.json . Use any of the Configuration Tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this file from the same directory where the file is located): curl -d \"@SystemAdapter.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration\" Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. If the operation fails due to errors in the configuration, the count of the error and suitable error message(s) are returned in the result. Example Sample configuration file of OPC UA adapter json { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ], \"Buffering\": { \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/OpcUa/OpcUa/Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } }, \"OmfEgress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ] } } REST URLs Relative URL HTTP verb Action api/v1/configuration/ PUT Replaces the configuration for the entire adapter"
  },
  "V1/main/V1/Configuration/System components configuration.html": {
    "href": "V1/main/V1/Configuration/System components configuration.html",
    "title": "System components configuration",
    "keywords": "System components configuration OSIsoft adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or EdgeCmd utility for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form (with cryptographic key material stored separately in a secure location.) If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system using REST, but also configure the system as a whole with a single REST call. Configure system components The configuration of system components includes adding, updating and deleting components. Add a system component Complete the following procedure to add a new component to the system: Using any text editor, create a file that contains the component to be added to the system in JSON form. For content structure, see Examples . For a table of all available parameters, see System components parameters . Note: The OmfEgress component is required for this initial release for adapters to run. You can add additional components if you want, but only a single OmfEgress component is supported. The following example adds a Modbus TCP adapter. { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" } Note: A unique ComponentId is necessary for each component in the system. This example uses the ComponentId Modbus1 since it is the first Modbus TCP adapter: Save the file, for example as AddComponent.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/components Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@AddComponent.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/components\" After the curl command completes successfully, you can configure or use the new component. Update system components Complete the following procedure to update the system components, for example by adding or removing components. Using any text editor, create a file that contains the current system components configuration. For information on how to retrieve the system components configuration, see REST URLs . Remove or add components as you need. Note: You cannot remove the OmfEgress component. Save the file, for example as UpdateComponents.json Use any of the Configuration tools capable of making HTTP requests to execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/components Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@UpdateComponents.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components\" Delete a system component Complete the following procedure to delete an existing component: Start any of the Configuration tools capable of making HTTP requests. Execute a DELETE command to the following endpoint, replacing <ComponentId> with the ID of the component that you want to delete: http://localhost:5590/api/v1/configuration/system/components/<ComponentId>/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located) Delete OpcUa1 component curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1/\" All the logs and configurations files for the deleted components will be moved to the corresponding logs/Removed or Configuration/Removed folder. System components schema The full schema definition for the system components configuration is in the System_Components_schema.json located here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas System components parameters The following parameters are available for configuring system components: Parameters Required Type Description ComponentId Required string The ID of the component. It can be any alphanumeric string, for example OmfEgress. ComponentType Required string The type of the component, for example OmfEgress. There are two types of components: OmfEgress and the adapter. Examples Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] System components configuration [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Modbus2\", \"componentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components GET Retrieves the system components configuration api/v1/configuration/system/components POST Adds a new component to the system configuration api/v1/configuration/system/components PUT Updates the system components configuration api/v1/configuration/system/components/ componentId DELETE Deletes a specific component from the system components configuration"
  },
  "V1/main/V1/Diagnostics/Adapter diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Adapter diagnostics.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics The adapter and its components produce different kinds of diagnostics data which is sent to all health endpoints. The System_Diagnostics.json file contains a flag which determines whether Diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd utility. Diagnostics data are collected by default. To egress diagnostics related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . Available diagnostics data Dynamic data is sent every minute to configured health endpoints. The following diagnostics data are available: System Stream count IO rate Error rate AF structure After running diagnostics with a health endpoint configured to a PI server, you can use PI System Explorer to view the diagnostics for a given adapter. The element hierarchy is shown in the following image. The_ Elements root contains a link to an Adapters _ node. This is the root note for all adapter instances. Below Adapters there will be one or more adapter nodes. Each node's title is defined by the node's corresponding computer name and service name in this format: _**{ComputerName}.{ServiceName}**_ . For example, in the following image, MachineName is the computer name, and OpcUa is the service name. To see the System.Diagnostics values, clicking on an adapter node and set the tab to Attributes . Example values are shown in the image."
  },
  "V1/main/V1/Diagnostics/Egress diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Egress diagnostics.html",
    "title": "Egress diagnostics",
    "keywords": "Egress diagnostics The Egress component of the adapter produces the following diagnostics streams. IO rate The Diagnostics.Egress.IORate dynamic type includes these values, which are logged in a stream with the id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate. IO rate includes only sequential data sucessfully sent to an egress. Property Type Description timestamp string Timestamp of event IORate double 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Error rate.html": {
    "href": "V1/main/V1/Diagnostics/Error rate.html",
    "title": "Error rate",
    "keywords": "Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes these values, which are logged in a stream with the id {componentid}.ErrorRate. Property Type Description timestamp string Timestamp of event ErrorRate double 1-minute rolling average of error rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/IO rate.html": {
    "href": "V1/main/V1/Diagnostics/IO rate.html",
    "title": "IO rate",
    "keywords": "IO rate The Diagnostics.Adapter.IORate dynamic type includes these values, which are logged in a stream with the id {componentid}.IORate. IO rate includes only sequential data collected from a data source. Property Type Description timestamp string Timestamp of event IORate double 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Stream count.html": {
    "href": "V1/main/V1/Diagnostics/Stream count.html",
    "title": "Stream count",
    "keywords": "Stream count The Diagnostics.StreamCountEvent dynamic type includes these values, which are logged in a stream with the id {componentid}.StreamCount. The stream count and type count include only types and streams created for sequential data received from a data source. Property Type Description timestamp string Timestamp of event StreamCount int Number of streams created by the adapter instance TypeCount int Number of types created by the adapter instance"
  },
  "V1/main/V1/Diagnostics/System.html": {
    "href": "V1/main/V1/Diagnostics/System.html",
    "title": "System",
    "keywords": "System The Diagnostics.System dynamic type includes the following values which are logged in a stream with the id System.Diagnostics. This diagnostic stream contains system level information related to the host platform that the adapter is running on. Property Type Description timestamp string Timestamp of event ProcessIdentifier int Process id of the host process StartTime string Time at which the host process started WorkingSet long Amount of physical memory in bytes, allocated for the host process TotalProcessorTime (uom=s) double Total processor time for the host process expressed in seconds TotalUserProcessorTime (uom=s) double User processor time for the host process expressed in seconds TotalPrivilegedProcessorTime (uom=s) double Privileged processor time for the host process expressed in seconds ThreadCount int Number of threads in the host process HandleCount int Number of handles opened by the host process ManagedMemorySize (uom=MB) double Number of bytes currently thought to be allocated in managed memory PrivateMemorySize (uom=MB) double Amount of paged memory, in bytes, allocated for the host process PeakPagedMemorySize (uom=MB) double Maximum amount of memory in the virtual memory paging file, in bytes, used by the host process. StorageTotalSize (uom=MB) double Total size of the storage medium in use by the system StorageFreeSpace (uom=MB) double Free space available Each adapter component produces its own diagnostics streams."
  },
  "V1/main/V1/Health/Adapter health.html": {
    "href": "V1/main/V1/Health/Adapter health.html",
    "title": "Adapter health",
    "keywords": "Adapter health OSIsoft adapters produce different kinds of health data, which can be egressed to different health endpoints. For details, see the following sections. Available health data Dynamic data is sent every minute to configured health endpoints. The following health data are available: Device status Next Health Message Expected Health endpoint differences Two following two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it configured PI Systems for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following: The dynamic health data is actually time-series data that is stored in PI points on a PI Data Archive and can be seen in the AF hierarchy as PI Point Data Reference attributes. OSIsoft Cloud Services currently does not have a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data will be stored. Each value will be its own stream with the timestamp property as the single index."
  },
  "V1/main/V1/Health/Device status.html": {
    "href": "V1/main/V1/Health/Device status.html",
    "title": "Device status",
    "keywords": "Device status The device status indicates the health of this component and if it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of \"Good\" is expected. Property Type Description Time string Timestamp of the event. DeviceStatus string The value of the DeviceStatus. The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to failover. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished. Removed The adapter component has been removed and will no longer collect data. NotConfigured The adapter component has been created but is not yet configured."
  },
  "V1/main/V1/Health/Health and diagnostics.html": {
    "href": "V1/main/V1/Health/Health and diagnostics.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics OSIsoft adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and data is flowing to the configured OSIsoft OMF endpoints. For more information, see Adapter health . OSIsoft adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For more information, see Adapter diagnostics . The examples in the configuration topics use curl, a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Health/Next health message expected.html": {
    "href": "V1/main/V1/Health/Next health message expected.html",
    "title": "Next health message expected",
    "keywords": "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected will be sent by an individual adapter data component on a periodic basis while it is functioning properly. This value will be a timestamp indicating when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, etc. Property Type Description Time string Timestamp of the event. NextHealthMessageExpected string Timestamp when next value is expected."
  },
  "V1/main/V1/Installation/Install the adapter.html": {
    "href": "V1/main/V1/Installation/Install the adapter.html",
    "title": "Install the adapter",
    "keywords": "Install the adapter Adapters can be installed on either a Windows or Linux operating system. Before installing the adapter, see the Installation prerequisites section to ensure your machine is properly configured to provide optimum adapter operation. Windows Complete the following procedure to install an OSIsoft adapter on Windows: Download the Windows .msi file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Run the .msi file. Follow the setup wizard. You can change the installation folder or port number during setup. The default port number is 5590. Optional: To verify the installation, run the following curl command using the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned Linux Complete the following procedure to install an OSIsoft adapter on Linux: Download the appropriate Linux distribution file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Open a terminal. Run the sudo apt install command. Examples : To install the Linux ARM Debian package, run command sudo apt install ./Modbus_linux-arm.deb To install the Linux x64 package, run command sudo apt install ./Modbus_linux-x64.deb Optional: To verify the installation, run the following curl command using the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned"
  },
  "V1/main/V1/Installation/Installation.html": {
    "href": "V1/main/V1/Installation/Installation.html",
    "title": "Installation",
    "keywords": "Installation Adapters are installed on a local machine using an install kit downloaded from the OSIsoft Customer Portal. For instructions on downloading and installing adapters, see Install the adapter . Installation prerequisites Adapters require the installation of the following software: Operating systems: Alpine: 3.10+ Debian: 9+ Ubuntu: 16.04+ Fedora: 29+ centOS: 7+ RHEL: 6+ openSUSE: 15+ SUSE Enterprise Linux (SLES): 12 SP2+ macOS: 10.13+ Windows Client: 8.1, 10 (1607+) Windows Server: 2012 R2+"
  },
  "V1/main/V1/Installation/Uninstall the adapter.html": {
    "href": "V1/main/V1/Installation/Uninstall the adapter.html",
    "title": "Uninstall the adapter",
    "keywords": "Uninstall the adapter Complete one of the following procedures for your operating system to uninstall an OSIsoft adapter: Windows To remove the OSIsoft adapter program files from a Windows device, use the Windows Control Panel uninstall application process. Note: The configuration, data, and log files are not removed by the uninstall process. Optional: To remove data, configuration and log files, remove the directory %ProgramData%\\OSIsoft\\Adapters\\AdapterName . This will delete all data processed by the adapter in addition to configuration and log files. Linux To remove OSIsoft adapter software from a Linux device, open a terminal window and run the following command: sudo apt remove osisoft.adapters.<AdapterName> Optional: To remove data, configuration, and log files, remove the directory /usr/share/OSIsoft/Adapters/AdapterName . This will delete all data processed by the adapter, in addition to configuration and log files. Alternatively, you can run the following command: sudo rm -r /usr/share/OSIsoft/Adapters/<AdapterName>"
  },
  "V1/main/V1/readme.html": {
    "href": "V1/main/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Troubleshooting/Data buffering.html": {
    "href": "V1/main/V1/Troubleshooting/Data buffering.html",
    "title": "Data buffering",
    "keywords": "Data buffering"
  },
  "V1/main/V1/Troubleshooting/Logging.html": {
    "href": "V1/main/V1/Troubleshooting/Logging.html",
    "title": "Logging",
    "keywords": "Logging"
  },
  "V1/main/V1/Troubleshooting/Troubleshooting.html": {
    "href": "V1/main/V1/Troubleshooting/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting"
  },
  "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA principles of operation.html": {
    "href": "V1/OSIsoft Adapter for OPC UA overview/OSIsoft Adapter for OPC UA principles of operation.html",
    "title": "OSIsoft Adapter for OPC UA principles of operation",
    "keywords": "OSIsoft Adapter for OPC UA principles of operation This adapter's operations focus on data collection and streams creation. Adapter configuration For the OPC UA adapter to start data collection, you need to configure the adapter by defining the following: Data source: Provide the data source from which the adapter should collect data. Data selection: Perform selection of OPC UA items to which the adapter should subscribe for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more information, see OSIsoft Adapter for OPC UA data source configuration and OSIsoft Adapter for OPC UA data selection configuration . Connection The OPC UA adapter uses the binary opc.tcp protocol to communicate with the OPC UA servers. When a secured connection is enabled, the X.509-type client and server certificates are exchanged and verified and the connection between the OPC UA adapter and the configured OPC UA server is established. Data collection The OPC UA adapter collects time-series data from selected OPC UA dynamic variables through OPC UA subscriptions (unsolicited reads). The adapter supports the Data Access (DA) part of OPC UA specification. Data types The following table lists OPC UA variable types that the adapter supports data collection from and types of streams that are going to be created. OPC UA data type Stream data type Boolean Boolean Byte Int16 SByte Int16 Int16 Int16 UInt16 UInt16 Int32 Int32 UInt32 UInt32 Int64 Int64 UInt64 UInt64 Float Float32 Double Float64 DateTime DateTime String String Stream creation The OPC UA adapter creates types upon receiving the value update for a stream. One stream is created for every selected OPC UA item in the data selection configuration. Streams by OPC UA adapter The OPC UA adapter creates a stream with two properties per selected OPC UA item. The properties are described in the following table: Property name Data type Description Timestamp DateTime Timestamp of the given OPC UA item value update. Value Based on type of incoming OPC UA value Value of the given OPC UA item update. Stream ID is a unique identifier for each stream created by the adapter for a given OPC UA item. If the Custom Stream ID is specified for the OPC UA item in data selection configuration, the OPC UA adapter uses that as a stream ID for the stream. Otherwise, the adapter constructs the stream ID using the following format constructed from the OPC UA item node ID: <Adapter Component ID>.<Namespace>.<Identifier> Note: The naming convention is affected by StreamPrefix and ApplyPrefixToStreamID settings in data source configuration. For more information, see OSIsoft Adapter for OPC UA data source configuration ."
  },
  "V1/OSIsoft_Adapter_for_OPC_UA_overview.html": {
    "href": "V1/OSIsoft_Adapter_for_OPC_UA_overview.html",
    "title": "OSIsoft Adapter for OPC UA overview",
    "keywords": "OSIsoft Adapter for OPC UA overview The OSIsoft Adapter for OPC UA is a data-collection component that transfers time-series data from source devices to OSIsoft OMF endpoints in OSIsoft Cloud Services or PI Servers. OPC Unified Architecture (OPC UA) is an open standard, machine-to-machine communication protocol for industrial automation developed by the OPC Foundation. The adapter can connect to any device that uses the OPC UA communication protocol. The adapter is installed with a download kit obtained from the OSIsoft Customer Portal and works on devices running either Windows or Linux operating systems. All functions of the adapter are configured using REST API and configurations are stored in JSON files. For data ingress, an adapter component must be defined in System components configuration for each device to which the adapter will connect. Each adapter component is then configured with the connection information for the device and the data to collect. For data egress, configuration is needed to specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting. Once the adapter is configured and sending data, use administration functions to manage the adapter or individual ingress components of the adapter. Use health and diagnostics functions to monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter."
  },
  "V1/readme.html": {
    "href": "V1/readme.html",
    "title": "",
    "keywords": ""
  }
}