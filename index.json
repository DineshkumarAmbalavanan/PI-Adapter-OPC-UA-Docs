{
  "README.html": {
    "href": "README.html",
    "title": "PI adapter OPC UA Docs",
    "keywords": "PI adapter OPC UA Docs"
  },
  "V1/ARCHIVE/OSIsoft Adapter for OPC UA supported features.html": {
    "href": "V1/ARCHIVE/OSIsoft Adapter for OPC UA supported features.html",
    "title": "PI Adapter for OPC UA supported features",
    "keywords": "PI Adapter for OPC UA supported features Data types The following table lists OPC UA variable types that the adapter supports data collection from and types of streams that are going to be created. OPC UA data type Stream data type Boolean Boolean Byte Int16 SByte Int16 Int16 Int16 UInt16 UInt16 Int32 Int32 UInt32 UInt32 Int64 Int64 UInt64 UInt64 Float Float32 Double Float64 DateTime DateTime String String Export operation The adapter is able to export available OPC UA dynamic variables by browsing the OPC UA hierarchies or sub-hierarchies. Export operation actions To limit browsing, specify a comma-separated collection of nodeIds in data source configuration (RootNodeIds). Note: They are treated as roots from where the adapter starts the browse operation. The adapter triggers an export operation after a successful connection to the OPC UA server when the data selection file does not exist in configuration directory. Copy the exported data selection JSON file from the directory or retrieve it using a REST API call. Optional: To avoid a potentially long and expensive browse operation, create the data selection file manually. Configure it before you configure the data source or push both in one configuration call together."
  },
  "V1/Configuration/Configuration.html": {
    "href": "V1/Configuration/Configuration.html",
    "title": "Configuration",
    "keywords": "Configuration PI Adapter for OPC UA provides configuration of data source and data selection. The adapter also provides configuration of security and the ability to generate a data selection file instead of manual configuration. The examples in the configuration topics use curl , a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on PI adapter configuration tools, see Configuration tools ."
  },
  "V1/Configuration/PI Adapter for OPC UA client settings configuration.html": {
    "href": "V1/Configuration/PI Adapter for OPC UA client settings configuration.html",
    "title": "PI Adapter for OPC UA client settings configuration",
    "keywords": "PI Adapter for OPC UA client settings configuration The client settings configuration is automatically generated when a new data source is added. If you experience problems with timeouts or when OPC UA limits are exceeded in terms of browse or subscription operation, you can change the client settings configuration. Generate default OPC UA client settings configuration file A default OPC UA client settings file is created if there is no OPC UA client settings configuration even though a valid data source exists and the adapter is running. Complete the following procedure for this default client settings file to be generated: Add an OPC UA adapter with a unique ComponentId . For more information, see System components configuration . Configure a valid OPC UA data source. For more information, see PI Adapter for OPC UA data source configuration . Once you complete these steps, a default OPC UA client settings configuration file is generated in the configuration directory for the corresponding platform. The following are example locations of the file created. In this example, it is assumed that the ComponentId of the OPC UA component is OpcUa1: Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\Configuration\\OpcUa1_ClientSettings.json Linux: /usr/share/OSIsoft/Adapters/OpcUa/Configuration/OpcUa1_ClientSettings.json Configure OPC UA client settings Complete the following steps to configure the OPC UA client settings: Using any text editor, create a file that contains the OPC UA client settings in the JSON format. For content structure, see OPC UA client settings example . For all available parameters, see OPC UA client settings . Save the file. For example, ClientSettings.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command to its appropriate endpoint: Note: The following example uses OpcUa1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. PUT endpoint: http://localhost:5590/api/v1/configuration/<componentId>/ClientSettings/ Example using curl : curl -d \"@ClientSettings.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OpcUa1/ClientSettings\" Note: Run this command from the same directory where the file is located. OPC UA client settings schema The full schema definition for the OPC UA client settings configuration is in the OpcUa_ClientSettings_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\OpcUa\\Schemas Linux: /opt/OSIsoft/Adapters/OpcUa/Schemas OPC UA client settings parameters The following parameters are available for configuring OPC UA client settings: Note : All intervals, delays, and timeouts require the string to be formatted like this: \\[d:\\]h:mm:ss\\[.FFFFFFF\\] where the items in brackets are optional. d = days, h = hours, mm = minutes, ss = seconds, F = fractional portion of a second. Example: \"05:07:10:40.150\" for 5 days, 7 hours, 10 minutes, 40 seconds, and .150 seconds. Parameter Required Type Description MaxBrowseReferencesToReturn Optional integer Maximum number of references returned from browse call. BrowseBlockSize Optional integer Maximum number of nodes to browse in one call. ReadBlockSize Optional integer Maximum number of variables to read in one call. ReconnectDelay Optional TimeSpan Delay between reconnection attempts. RecreateSubscriptionDelay Optional TimeSpan Delay between successful reconnection and subsequent subscription recreation. SessionRequestTimeout Optional TimeSpan Default request timeout. ConnectionTimeout Optional TimeSpan Connection timeout. SessionAllowInsecureCredentials Optional boolean When set to true credentials can be communicated over unencrypted channel. SessionMaxOperationsPerRequest Optional integer Default maximum operation per request. BrowseTimeout Optional TimeSpan Browse operation timeout. ReadTimeout Optional TimeSpan Read operation timeout. MaxMonitoredItemsPerCall Optional integer Maximum number of monitored items that can be added to subscription in one call. MaxNotificationsPerPublish Optional integer Maximum notification messages in one publish message. PublishingInterval Optional TimeSpan Publishing interval of the subscription. CreateMonitoredItemsTimeout Optional TimeSpan Create monitored items timeout. SamplingInterval Optional TimeSpan Monitored item sampling interval. MonitoredItemQueueSize Optional integer Monitored item queue size. MaxInternalQueueSize Optional integer Maximum number of items that can be in the adapter internal queue. OPC UA client settings example { \"maxBrowseReferencesToReturn\": 0, \"BrowseBlockSize\": 10, \"ReadBlockSize\": 1000, \"reconnectDelay\": \"0:00:30\", \"recreateSubscriptionDelay\": \"0:00:05\", \"sessionRequestTimeout\": \"0:02:00\", \"connectionTimeout\": \"0:00:30\", \"sessionAllowInsecureCredentials\": false, \"sessionMaxOperationsPerRequest\": 1000, \"browseTimeout\": \"0:01:00\", \"ReadTimeout\": \"0:00:30\", \"maxMonitoredItemsPerCall\": 1000, \"maxNotificationsPerPublish\": 0, \"publishingInterval\": \"0:00:01\", \"createMonitoredItemsTimeout\": \"0:00:30\", \"samplingInterval\": \"0:00:00.5\", \"monitoredItemQueueSize\": 2, \"maxInternalQueueSize\": 500000 } REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /ClientSettings GET Retrieves the OPC UA client settings configuration api/v1/configuration/ ComponentId /ClientSettings PUT Configures or updates the OPC UA client settings configuration api/v1/configuration/ ComponentId /ClientSettings DELETE Deletes the OPC UA client settings configuration api/v1/configuration/ ComponentId /ClientSettings PATCH Allows partial updating of configured client settings fields. Note: Replace ComponentId with the Id of your OPC UA component, for example OpcUa1."
  },
  "V1/Configuration/PI Adapter for OPC UA data selection configuration.html": {
    "href": "V1/Configuration/PI Adapter for OPC UA data selection configuration.html",
    "title": "PI Adapter for OPC UA data selection configuration",
    "keywords": "PI Adapter for OPC UA data selection configuration In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the adapter to collect from the data sources. When you add a data source, the adapter browses the entire OPC UA server address space and exports the available OPC UA variables into a JSON file for data selection. Comma-separated collection of nodeIds (RootNodeIds) serve as filters to browse only a subset of the OPC UA server. Data is collected automatically based upon user demands. OPC UA data from OPC UA variables is read through subscriptions (unsolicited reads). You can decide to have the data selection configuration file generated automatically or you can create it manually yourself. Generate default OPC UA data selection configuration file A default OPC UA data selection file will be created if there is no OPC UA data selection configuration although a valid data source exists. Note: To avoid possible time and resource expensive browse operations due to reasons described previously, OSIsoft recommends that you manually create a data selection file instead of automatically creating the default data selection file. For more information, see Configure OPC UA data selection . Complete the following procedure for this default data selection file to be generated: Add an OPC UA adapter with a unique ComponentId. For more information, see System components configuration . Configure a valid OPC UA data source. For more information, see PI Adapter for OPC UA data source configuration . Once you complete these steps, a default OPC UA data selection configuration file will be generated in the configuration directory for the corresponding platform. The following are example locations of the file created. In this example, it is assumed that the ComponentId of the OPC UA component is OpcUa1: Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\OpcUa\\Configuration\\OpcUa1_DataSelection.json Linux: /usr/share/OSIsoft/Adapters/OpcUa/OpcUa/Configuration/OpcUa1_DataSelection.json Copy the file to a different directory. For content structure, see OPC UA data selection example . Using any text editor, change the value of any Selected key from false to true in the file. Once the configuration is updated, the adapter will subscribe to data for all items that are set to Selected=true . In the same directory where you edited the file, run the following curl command: Note: 5590 is the default port number. If you selected a different port number, replace it with that value. curl -i -d \"@OpcUa1_DataSelection.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OpcUa1/Dataselection\" Configure OPC UA data selection Note: You cannot modify OPC UA data selection configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following procedure to configure the OPC UA data selection: Using any text editor, create a file that contains an OPC UA data selection in JSON form. For content structure, see OPC UA data selection example . For a table of all available parameters, see OPC UA data selection . Save the file, for example as DataSelection.config.json . Use any of the Configuration tools capable of making HTTP requests to run either a POST or PUT command to their appropriate endpoint: Note: The following examples use OpcUa1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. POST endpoint: http://localhost:5590/api/v1/configuration/<componentId>/DataSelection/ Example using curl : curl -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OpcUa1/DataSelection\" Note: Run this command from the same directory where the file is located. PUT endpoint: http://localhost:5590/api/v1/configuration/<componentId>/DataSelection/<StreamId> Example using curl : curl -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OpcUa1/DataSelection/ns=5;s=Random1\" Note: Run this command from the same directory where the file is located. OPC UA data selection schema The full schema definition for the OPC UA data selection configuration is in the OpcUa_DataSelection_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\OpcUa\\Schemas Linux: /opt/OSIsoft/Adapters/OpcUa/Schemas OPC UA data selection parameters The following parameters are available for configuring an OPC UA data selection: Parameter Required Type Description Selected Optional boolean Use this field to select or clear a measurement. To select an item, set to true. To remove an item, leave the field empty or set to false. If not configured, the default value is true. Name Optional string Name of the data item collected from the data source. Default: null - results in StreamId value being used also as a Name NodeId Required string The NodeId of the variable. Examples \"ns=5;AString\" \"ns=2;i=203\" \"ns=<NamespaceIndex>;<IdentifierType>=<Identifer>\" StreamID Optional string The custom stream ID used to create the streams. If not specified, the adapter will generate a default stream ID based on the measurement configuration. The StreamId serves as the unique identifier of a data selection item. A properly configured custom stream ID follows these rules: Is not case-sensitive. Can contain spaces. Cannot start with two underscores (\"__\"). Can contain a maximum of 100 characters. Cannot use the following characters: / : ? # [ ] @ ! $ & ' ( ) \\ * + , ; = % < > | Cannot start or end with a period. Cannot contain consecutive periods. Cannot consist of only periods. OPC UA data selection example The following are examples of valid OPC UA data selection configurations: Minimum data selection configuration : [ { \"NodeId\": \"ns=5;s=Random1\" }, { \"NodeId\": \"ns=5;s=Sawtooth1\" }, { \"NodeId\": \"ns=5;s=Sinusoid1\" } ] Maximum data selection configuration : [ { \"Selected\": true, \"Name\": \"CustomStreamName\", \"NodeId\": \"ns=5;s=Random1\", \"StreamId\": \"CustomStreamName\" }, { \"Selected\": false, \"Name\": null, \"NodeId\": \"ns=5;s=Sawtooth1\", \"StreamId\": null }, { \"Selected\": true, \"Name\": \"5.Sinusoid1\", \"NodeId\": \"ns=5;s=Sinusoid1\", \"StreamId\": null } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSelection GET Retrieves the OPC UA data selection configuration api/v1/configuration/ ComponentId /DataSelection PUT Configures or updates the OPC UA data selection configuration api/v1/configuration/ ComponentId /DataSelection DELETE Deletes the OPC UA data selection configuration api/v1/configuration/ ComponentId /DataSelection PATCH Allows partial updating of configured data selection items. Note: The request must be an array containing one or more data selection items. Each data selection item in the array must include its StreamId . api/v1/configuration/ ComponentId /DataSelection/ StreamId PUT Updates or creates a new data selection with the specified StreamId api/v1/configuration/ ComponentId /DataSelection/ StreamId DELETE Deletes a specific data selection item of the OPC UA data selection configuration Note: Replace ComponentId with the Id of your OPC UA component, for example OpcUa1."
  },
  "V1/Configuration/PI Adapter for OPC UA data source configuration.html": {
    "href": "V1/Configuration/PI Adapter for OPC UA data source configuration.html",
    "title": "PI Adapter for OPC UA data source configuration",
    "keywords": "PI Adapter for OPC UA data source configuration To use the adapter, you must configure the data source from which it will be polling data. Configure OPC UA data source Note: You cannot modify OPC UA data source configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following procedure to configure an OPC UA data source: Using any text editor, create a file that contains an OPC UA data source in JSON form. For content structure, see OPC UA data source examples . For a table of all available parameters, see OPC UA data source parameters . Save the file, for example as DataSource.config.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<adapterId>/DataSource/ . Note: The following example uses OpcUa1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"@DataSource.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OpcUa1/DataSource\" Note: Run this command from the same directory where the file is located. Note: After you have completed data source configuration, the next step is to configure data selection. You can decide to have a default data selection file generated automatically or you can create the data selection file yourself. For more information, see PI Adapter for OPC UA data selection configuration . OPC UA data source schema The full schema definition for the OPC UA data source configuration is in the OpcUa_DataSource_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\OpcUa\\Schemas Linux: /opt/OSIsoft/Adapters/OpcUa/Schemas OPC UA data source parameters The following parameters are available for configuring an OPC UA data source: Parameter Required Type Description EndpointURL Required string The endpoint URL of the OPC UA server in opc.tcp format. The following is an example of the URL format: opc.tcp://OPCServerHost:Port/OpcUa/SimulationServer Note: If you change the EndpointURL on a configured adapter that has ComponentID_DataSelection .json file exported, you need to remove the ComponentID_DataSelection.json file from the configuration directory to trigger a new browse (export). UseSecureConnection Optional boolean When set to true, the adapter connects to a secure endpoint using OPC UA certificate exchange operation. The default is true. When set to false, the adapter connects to an unsecured endpoint of the server and certificate exchange operation is not required. Note: OSIsoft recommends setting this option to false for testing purposes only. UserName Optional string User name for accessing the OPC UA server. Password Optional string Password for accessing the OPC UA server. Note: OSIsoft recommends using REST to configure the data source when the password must be specified because REST will encrypt the password. If you do not use REST, the plain text password will be stored on-disk. RootNodeIds Optional string List of comma-separated NodeIds of those objects from which the adapter browses the OPC UA server address space. This option allows to select only subsets of the OPC UA address by explicitly listing one or more NodeIds which are used to start the initial browse. Examples: \"ns=5;s=85/0:Simulation\" \"ns=3;s=DataItems\" If not specified, it means that the whole address space will be browsed. IncomingTimestamp Optional string Specifies whether the incoming timestamp is taken from the source, from the OPC UA server, or should be created by the adapter instance. Source - Default and recommended setting. The timestamp is taken from the source timestamp field. The source is what provides data for the item to the OPC UA server, such as a field device. Server - In case the OPC UA item has an invalid source timestamp field, the Server timestamp can be used. Adapter - The adapter generates a timestamp for the item upon receiving it from the OPC UA server. StreamIdPrefix Optional string Specifies what prefix is used for Stream IDs. The naming convention is StreamIdPrefix.StreamId. An empty string means no prefix will be added to the Stream IDs and names. Null value defaults to ComponentID followed by a dot, for example, OpcUa1 .NamespaceIndex.Identifier. Note: Every time you change the StreamIdPrefix of a configured adapter, for example when you delete and add a data source, you need to restart the adapter for the changes to take place. New streams are created on adapter restart and pre-existing streams are no longer updated. DefaultStreamIdPattern Optional string Specifies the default stream Id pattern to use. Possible parameters: {NamespaceIndex}, {Identifier}, {Name}. Null value will default to {NamespaceIndex.Identifier} . OPC UA data source examples The following are examples of valid OPC UA data source configurations: Minimum data source configuration { \"EndpointUrl\": \"opc.tcp://<IP-Address>:<Port>/<TestOPCUAServer>\" } Maximum data source configuration { \"EndpointUrl\": \"opc.tcp://<IP-Address>:<Port>/<TestOPCUAServer>\", \"UseSecureConnection\": true, \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"StreamIdPrefix\": null, \"DefaultStreamIdPattern\": \"{NamespaceIndex.Identifier}\" } REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSource GET Retrieves the OPC UA data source configuration api/v1/configuration/ ComponentId /DataSource POST Creates the OPC UA data source configuration api/v1/configuration/ ComponentId /DataSource PUT Configures or updates the OPC UA data source configuration api/v1/configuration/ ComponentId /DataSource DELETE Deletes the OPC UA data source configuration Note: Replace ComponentId with the Id of your OPC UA component, for example OpcUa1."
  },
  "V1/Configuration/PI Adapter for OPC UA security configuration.html": {
    "href": "V1/Configuration/PI Adapter for OPC UA security configuration.html",
    "title": "PI Adapter for OPC UA security configuration",
    "keywords": "PI Adapter for OPC UA security configuration The OPC UA security standard is concerned with the authentication of client and server applications, the authentication of users and confidentiality of their communication. As the security model relies heavily on Transport Level Security (TLS) to establish a secure communication link with an OPC UA server, each client, including the adapter, must have a digital certificate deployed and configured. Certificates uniquely identify client applications and machines on servers, and allow for creation of a secure communication link when trusted on both sides. The adapter generates a self-signed certificate when the first secure connection attempt is made. The adapter's certificates and those of the server are stored in the certificate store which is shared between all adapter instances. Configure OPC UA adapter security Complete the following procedure to configure adapter security: In your data source configuration, set UseSecureConnection to true . For more information, see PI Adapter for OPC UA data source configuration . The adapter verifies whether the server certificate is present in the adapter trusted certificates and hence trusts it. In case the certificates were not exchanged before the first attempted connection, the adapter persists the server certificate within the adapter rejected certificates folder. The following warning message about the rejected server certificate will be printed: ~~2019-09-08 11:45:48.093 +01:00~~ [Warning] Rejected Certificate: \"DC=MyServer.MyDomain.int, O=OSIsoft, CN=Simulation Manually move the server certificate from the Adapter rejected certificates location to the Adapter trusted certificates location using a file explorer or command-line interpreter. Linux example using command-line: sudo mv /usr/share/OSIsoft/Adapters/OpcUa/Certificates/rejected/certs/'SimulationServer [F9823DCF607063DBCECCF6F8F39FD2584F46AEBB].der' /usr/share/OSIsoft/Adapters/OpcUa/Certificates/trusted/certs/ Note: Administrator or root privileges are required to perform this operation. Once the certificate is in the adapter trusted certificates folder, the adapter trusts the server and the connection attempt proceeds in making the connection call to the configured server. Add the certificate of the adapter to the server's trust store. The connection succeeds only when the adapter certificate is trusted on the server side. For more details on how to make a client certificate trusted, see your OPC UA server documentation. In general, servers work in a similar fashion to the clients, hence you can take a similar approach for making the client certificate trusted on the server side. When certificates are mutually trusted, the connection attempt succeeds and the adapter is connected to the most secure endpoint provided by the server. Certificate locations Adapter rejected certificates Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\Certificates\\rejected\\certs Linux: /usr/share/OSIsoft/Adapters/OpcUa/Certificates/rejected/certs Adapter trusted certificates Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\Certificates\\trusted\\certs Linux: /usr/share/OSIsoft/Adapters/OpcUa/Certificates/trusted/certs Certificate of the adapter Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\Certificates\\own\\certs Linux: /usr/share/OSIsoft/Adapters/OpcUa/Certificates/own/certs Note: Access to the private key of the adapter requires administrator permissions. The location of the private key is the following: Windows: %programdata%\\OSIsoft\\Adapters\\OpcUa\\Certificates\\own\\private Linux: /usr/share/OSIsoft/Adapters/OpcUa/Certificates/own/private"
  },
  "V1/index.html": {
    "href": "V1/index.html",
    "title": "PI Adapter for OPC UA overview",
    "keywords": "PI Adapter for OPC UA overview The PI Adapter for OPC UA is a data-collection component that transfers time-series data from source devices to OMF endpoints in OSIsoft Cloud Services or PI Servers. OPC UA (OPC Unified Architecture) is an open standard, machine-to-machine communication protocol for industrial automation developed by the OPC Foundation. The adapter can connect to any device that uses the OPC UA communication protocol. The adapter is installed with a download kit obtained from the OSIsoft Customer Portal and works on devices running either Windows or Linux operating systems. All functions of the adapter are configured using REST API. The configurations are stored in JSON files. For data ingress, an adapter component must be defined in the system components configuration for each device to which the adapter will connect. Each adapter component is then configured with the connection information for the device and the data to collect. For data egress, configuration is needed to specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once the adapter is configured and sending data, administration functions are used to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter. <!-- # PI Adapter for OPC UA ======= - [PI Adapter for OPC UA overview](xref:PIAdapterForOPCUAOverview) - [PI Adapter for OPC UA principles of operation](xref:PIAdapterForOPCUAPrinciplesOfOperation) - [Installation](xref:Installation) - [Install the adapter](xref:InstallTheAdapter) - [Install PI Adapter for OPC UA using Docker](xref:InstallPIAdapterForOPCUAUsingDocker) - [Uninstall the adapter](xref:UninstallTheAdapter) - [Configuration](xref:OPCUAConfiguration) - [Configuration tools](xref:ConfigurationTools) - [System components configuration](xref:SystemComponentsConfiguration) - [PI Adapter for OPC UA data source configuration](xref:PIAdapterForOPCUADataSourceConfiguration) - [PI Adapter for OPC UA data selection configuration](xref:PIAdapterForOPCUADataSelectionConfiguration) - [PI Adapter for OPC UA security configuration](xref:PIAdapterForOPCUASecurityConfiguration) - [Egress endpoints configuration](xref:EgressEndpointsConfiguration) - [Health endpoint configuration](xref:HealthEndpointConfiguration) - [Diagnostics configuration](xref:DiagnosticsConfiguration) - [Buffering configuration](xref:BufferingConfiguration) - [Logging configuration](xref:LoggingConfiguration) - [System and adapter configuration](xref:SystemAndAdapterConfiguration) - [Administration](xref:Administration) - [Start and stop an adapter](xref:StartAndStopAnAdapter) - [Start and stop ingress component](xref:StartAndStopIngressComponent) - [Retrieve product version information](xref:RetrieveProductVersionInformation) - [Delete an adapter component](xref:DeleteAnAdapterComponent) - [Health and diagnostics](xref:HealthAndDiagnostics) - [Adapter health](xref:AdapterHealth) - [Device status](xref:DeviceStatus) - [Next health message expected](xref:NextHealthMessageExpected) - [Adapter diagnostics](xref:AdapterDiagnostics) - [System](xref:System) - [Stream count](xref:StreamCount) - [IO rate](xref:IORate) - [Error rate](xref:ErrorRate) - [Egress diagnostics](xref:EgressDiagnostics) -->"
  },
  "V1/Installation/Install PI Adapter for OPC UA using Docker.html": {
    "href": "V1/Installation/Install PI Adapter for OPC UA using Docker.html",
    "title": "Install PI Adapter for OPC UA using Docker",
    "keywords": "Install PI Adapter for OPC UA using Docker Docker is a set of tools that you can use on Linux to manage application deployments. Note: If you want to use Docker, you must be familiar with the underlying technology and have determined that it is appropriate for your planned use of the OPC UA adapter. Docker is not a requirement to use OPC UA adapter. This topic provides examples of how to create a Docker container with the OPC UA adapter. Create a startup script for the adapter Using any text editor, create a script similar to the following. Note: The script varies slightly by processor. ARM32 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/OpcUa_linux-arm/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/OpcUa/OpcUa\" } } EOF exec /OpcUa_linux-arm/OSIsoft.Data.System.Host ARM64 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/OpcUa_linux-arm64/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/OpcUa/OpcUa\" } } EOF exec /OpcUa_linux-arm64/OSIsoft.Data.System.Host AMD64 #!/bin/sh #local variables defaultPort=5590 #regexp to only accept numerals re='^[0-9]+$' portConfigFile=\"/OpcUa_linux-x64/appsettings.json\" #validate the port number input if [ -z $portnum ] ; then portnum=${defaultPort} echo \"Default value selected.\" ; else echo $portnum | grep -q -E $re isNum=$? if [ $isNum -ne 0 ] || [ $portnum -le 1023 ] || [ $portnum -gt 49151 ] ; then echo \"Invalid input. Setting default value ${defaultPort} instead...\" portnum=${defaultPort} ; fi fi echo \"configuring port ${portnum}\" #write out the port config file cat > ${portConfigFile} << EOF { \"ApplicationSettings\": { \"Port\": ${portnum}, \"ApplicationDataDirectory\": \"/usr/share/OSIsoft/Adapters/OpcUa/OpcUa\" } } EOF exec /OpcUa_linux-x64/OSIsoft.Data.System.Host Name the script opcuadockerstart.sh and save it to the directory where you plan to create the container. Create a Docker container containing the OPC UA adapter Create the following Dockerfile in the directory where you want to create and run the container. Note: Dockerfile is the required name of the file. Use the variation according to your operating system: ARM32 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY opcuadockerstart.sh / RUN chmod +x /opcuadockerstart.sh ADD ./OpcUa_linux-arm.tar.gz . ENTRYPOINT [\"/opcuadockerstart.sh\"] ARM64 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY opcuadockerstart.sh / RUN chmod +x /opcuadockerstart.sh ADD ./OpcUa_linux-arm64.tar.gz . ENTRYPOINT [\"/opcuadockerstart.sh\"] AMD64 (x64) FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libicu60 libssl1.0.0 COPY opcuadockerstart.sh / RUN chmod +x /opcuadockerstart.sh ADD ./OpcUa_linux-x64.tar.gz . ENTRYPOINT [\"/opcuadockerstart.sh\"] Copy the OpcUa_linux-<platform>.tar.gz file to the same directory as the Dockerfile. Copy the opcuadockerstart.sh script to the same directory. Run the following command line in the same directory (sudo may be necessary): docker build -t opcuaadapter . Run the OPC UA adapter Docker container REST access from the local host to the Docker container Complete the following to run the container: Use the docker container image opcuaadapter created previously. Type the following in the command line (sudo may be necessary): docker run -d --network host opcuaadapter Port 5590 is accessible from the host and you can make REST calls to OPC UA adapter from applications on the local host computer. In this example, all data stored by the OPC UA adapter is stored in the container itself. When the container is deleted, the data stored is also deleted. Provide persistent storage for the Docker container Complete the following to run the container: Use the docker container image opcuaadapter created previously. Type the following in the command line (sudo may be necessary): docker run -d --network host -v /opcua:/usr/share/OSIsoft/ opcuaadapter Port 5590 is accessible from the host and you can make REST calls to OPC UA adapter from applications on the local host computer. In this example, all data that is written to the container is instead written to the host directory. In this example, the host directory is a directory on the local machine, /opcua . You can specify any directory. Port number change To use a different port other than 5590 you can specify a portnum variable on the docker run command line. For example, to start the adapter using port 6000 instead of 5590, you use the command line: docker run -d -e portnum=6000 --network host opcuaadapter Instead of accessing the REST API using port 5590 you use port 6000. The following curl command returns the configuration for the container. curl http://localhost:6000/api/v1/configuration Remove REST access to the Docker container If you remove the --network host option from the docker run command, no REST access is possible from outside the container. This may be of value where you want to host an application in the same container as OPC UA adapter and do not want to have external REST access enabled."
  },
  "V1/Installation/System requirements.html": {
    "href": "V1/Installation/System requirements.html",
    "title": "System requirements",
    "keywords": "System requirements PI Adapter for OPC UA is supported on a variety of platforms and processors. Install kits are available for the following platforms: Operating System Installation Kit Processor(s) Windows 10 x64 (any version) OpcUa_win10-x64.msi Intel/AMD 64-bit processors Debian 9 or later x64 OpcUa_linux-x64.deb Intel/AMD 64-bit processors Debian 9 or later arm32 OpcUa_linux-arm.deb Arm 32-bit processors Debian 9 or later arm64 OpcUa_linux-arm64.deb Arm 64-bit processors Alternatively, you can use tar.gz files with binaries to build your own custom installers or containers for Linux. For more information on installing PI Adapter for OPC UA with Docker containers, see Install PI Adapter for OPC UA using Docker ."
  },
  "V1/PI Adapter for OPC UA overview/PI Adapter for OPC UA principles of operation.html": {
    "href": "V1/PI Adapter for OPC UA overview/PI Adapter for OPC UA principles of operation.html",
    "title": "PI Adapter for OPC UA principles of operation",
    "keywords": "PI Adapter for OPC UA principles of operation This adapter's operations focus on data collection and stream creation. Adapter configuration For the OPC UA adapter to start data collection, configure the following: Data source: Provide the data source from which the adapter should collect data. Data selection: Perform selection of OPC UA items to which the adapter should subscribe for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more information, see PI Adapter for OPC UA data source configuration and PI Adapter for OPC UA data selection configuration . Connection The OPC UA adapter uses the binary opc.tcp protocol to communicate with the OPC UA servers. When a secured connection is enabled, the X.509-type client and server certificates are exchanged and verified and the connection between the OPC UA adapter and the configured OPC UA server is established. For more information on secure connections, see PI Adapter for OPC UA security configuration . Data collection The OPC UA adapter collects time-series data from selected OPC UA dynamic variables through OPC UA subscriptions (unsolicited reads). The adapter supports the Data Access (DA) part of OPC UA specification. For more information, see Unified Architecture (https://opcfoundation.org/developer-tools/specifications-unified-architecture/part-8-data-access) . Data types The following table lists OPC UA variable types that the adapter supports data collection from and types of streams that will be created. OPC UA data type Stream data type Boolean Boolean Byte Int16 SByte Int16 Int16 Int16 UInt16 UInt16 Int32 Int32 UInt32 UInt32 Int64 Int64 UInt64 UInt64 Float Float32 Double Float64 DateTime DateTime String String Stream creation The OPC UA adapter creates types upon receiving the value update for a stream. One stream is created for every selected OPC UA item in the data selection configuration. Streams by OPC UA adapter The OPC UA adapter creates a stream with two properties for each selected OPC UA item. The properties are described in the following table: Property name Data type Description Timestamp DateTime Timestamp of the given OPC UA item value update. Value Based on type of incoming OPC UA value Value of the given OPC UA item update. Certain metadata are sent with each stream created. Metadata common for every adapter type are ComponentId : Specifies the type of adapter, for example OpcUa ComponentType : Specifies the data source, for example OpcUa1 Metadata specific to the OPC UA adapter are BrowseName : The browse name as provided by the OPC UA server SourceId : The NodeId provided by the OPC UA server Each stream created by the adapter for a given OPC UA item has a unique identifier (Stream ID). If a custom stream ID is specified for the OPC UA item in data selection configuration, the OPC UA adapter uses that stream ID to create the stream. Otherwise, the adapter constructs the stream ID using the following format, which is constructed from the OPC UA item node ID: <Adapter Component ID>.<NamespaceIndex>.<Identifier> Note: The naming convention is affected by StreamPrefix and ApplyPrefixToStreamID settings in data source configuration. For more information, see PI Adapter for OPC UA data source configuration ."
  },
  "V1/PI_Adapter_for_OPC_UA_overview.html": {
    "href": "V1/PI_Adapter_for_OPC_UA_overview.html",
    "title": "PI Adapter for OPC UA overview",
    "keywords": "PI Adapter for OPC UA overview The PI Adapter for OPC UA is a data-collection component that transfers time-series data from source devices to OMF endpoints in OSIsoft Cloud Services or PI Servers. OPC UA (OPC Unified Architecture) is an open standard, machine-to-machine communication protocol for industrial automation developed by the OPC Foundation. The adapter can connect to any device that uses the OPC UA communication protocol. The adapter is installed with a download kit obtained from the OSIsoft Customer Portal and works on devices running either Windows or Linux operating systems. All functions of the adapter are configured using REST API. The configurations are stored in JSON files. For data ingress, an adapter component must be defined in the system components configuration for each device to which the adapter will connect. Each adapter component is then configured with the connection information for the device and the data to collect. For data egress, configuration is needed to specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once the adapter is configured and sending data, administration functions are used to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter."
  },
  "V1/readme.html": {
    "href": "V1/readme.html",
    "title": "",
    "keywords": ""
  }
}